using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using System.Drawing.Imaging;
using Newtonsoft.Json;
using System.Drawing.Drawing2D;

namespace Syscon_Solution.LSprogram
{
    public partial class missioneditForm : UserControl
    {
        public missioneditForm()
        {
            //InitializeComponent();

            //// This line of code is generated by Data Source Configuration Wizard
            //// Fill a SqlDataSource
            //sqlDataSource1.Fill();
        }

        LSprogram.mainForm mainform;

        public missioneditForm(LSprogram.mainForm frm)
        {

            InitializeComponent();
            mainform = frm;

            oninit();
        }

        bool flag = false;
        MySqlConnection conn;
        Bitmap img;

        private void button1_Click(object sender, EventArgs e)
        {
            //OpenFileDialog dialog = new OpenFileDialog();
            //dialog.InitialDirectory = @"F:\MAP";
            //string image_file = string.Empty;
            //if (dialog.ShowDialog() == DialogResult.OK)
            //{
            //    image_file = dialog.FileName;
            //}
            //else if (dialog.ShowDialog() == DialogResult.Cancel)
            //{
            //    return;
            //}
            //pb_map.SizeMode = PictureBoxSizeMode.Normal;
            //img = new Bitmap(Bitmap.FromFile(image_file));
            //width = img.Width;
            //height = img.Height;

            //connSql();


            flag = true;
            string strConn = "Server=192.168.20.28;Database=ridis_db;Uid=syscon;Pwd=r023866677!";
            conn = new MySqlConnection(strConn);
            conn.Open();
            selectMap();
            conn.Close();
            Invoke(new MethodInvoker(delegate ()
            {
                //MessageBox.Show("맵 불러오기 완료");
            }));

        }

        private void connSql()
        {
            string strConn = "Server=192.168.20.28;Database=ridis_db;Uid=syscon;Pwd=r023866677!";
            conn = new MySqlConnection(strConn);
            conn.Open();
            selectMap();
        }

        public void oninit()
        {
            pb_map.MouseWheel += new MouseEventHandler(picturebox_Wheel);

            gridView1.OptionsBehavior.Editable = false;
            sqlDataSource1.Fill();
            onMissionListRead();
            aboutMove();
            bindingCombobox();
        }

        
        float resolution;
        private void selectMap()
        {
            //DataSet ds = new DataSet();
            //string sql = "select * from map_t order by idx DESC limit 1";
            //MySqlDataAdapter adapter = new MySqlDataAdapter(sql, conn);
            //string temp = "";
            //adapter.Fill(ds, "map_t");
            //if (ds.Tables.Count > 0)
            //{
            //    foreach (DataRow r in ds.Tables[0].Rows)
            //    {
            //        mapstate = JsonConvert.DeserializeObject<MapState>(r["map_data"].ToString());
            //    }
            //}
            //width = mapstate.info.width;
            //height = mapstate.info.height;
            //resolution = (float)mapstate.info.resolution;
            //ori_x = (float)mapstate.info.origin.position.x;
            //ori_y = (float)mapstate.info.origin.position.y;

            //picturebox_paint();
            //conn.Close();
            try
            {

                DataSet ds = new DataSet();
                string sql = "select * from map_t order by idx DESC limit 1";
                MySqlDataAdapter adapter = new MySqlDataAdapter(sql, conn);
                string temp = "";
                adapter.Fill(ds, "map_t");
                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow r in ds.Tables[0].Rows)
                    {
                        //Console.WriteLine(r["map_data"]);
                        mapstate = JsonConvert.DeserializeObject<MapState>(r["map_data"].ToString());
                        //Console.WriteLine(mapstate.data);
                    }
                }
                Console.WriteLine(mapstate.data.Count());
                width = mapstate.info.width;
                height = mapstate.info.height;
                resoultion1 = (float)mapstate.info.resolution;
                ori_x = (float)mapstate.info.origin.position.x;
                ori_y = (float)mapstate.info.origin.position.y;
                sourceMapValues = mapstate.data.ToArray().Select(x => (byte)x).ToArray();
                for (var y = 0; y < width * height; y++)
                {
                    sourceMapValues[y] = (byte)mapstate.data[y];

                }
                MapInfoComplete();
            }
            catch
            {
                Console.WriteLine("너무 오래걸림..");
            }
        }
        private void picturebox_paint()
        {
            try
            {
                dOrignX = ((ori_x * -1) / resolution);
                dOrignY = ((ori_y) / resolution);

                if (dOrignY < 0) dOrignY *= -1;
                dOrignY = img.Height - dOrignY;

                dOrignX = dOrignX * (float)Wheelratio;
                dOrignY = dOrignY * (float)Wheelratio;
                Bitmap sourceBMP = new Bitmap(img, img.Width, img.Height);

                Image image_resize;
                image_resize = ZoomIn(sourceBMP, (float)Wheelratio);

                Bitmap displayBMP = new Bitmap(image_resize.Width, image_resize.Height);
                displayBMP.SetResolution(image_resize.HorizontalResolution, image_resize.VerticalResolution);
                Graphics g = Graphics.FromImage(displayBMP);
                g.DrawImage(image_resize, new PointF(0, 0));
                Pen pen4 = new Pen(Brushes.Red, 2);
                pen4.DashStyle = DashStyle.Dot;
                if (pb_map.Image != null)
                {
                    foreach (KeyValuePair<string, Robot_RegInfo> info in Data.Instance.Robot_RegInfo_list)
                    {
                        string strrobotid = info.Key;

                        //    for (int idx = 0; idx < mainform.G_robotList.Count; idx++)
                        // {
                        if (Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate != null)
                        {
                            if (Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg != null)
                            {
                                float robotx = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg.pose.x;
                                float roboty = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg.pose.y;

                                float cellX = (float)(robotx / resolution);
                                float cellY = (float)(roboty / resolution);

                                PointF pos = new PointF();
                                pos.X = dOrignX + cellX * (float)Wheelratio;
                                pos.Y = dOrignY - cellY * (float)Wheelratio;
                                Pen pen_robot = new Pen(Brushes.BlueViolet, 3);
                                pen_robot.DashStyle = DashStyle.Solid;

                                g.DrawEllipse(pen_robot, pos.X - 10, pos.Y - 10, 20, 20);
                                g.DrawString(string.Format("{0}", strrobotid), new Font("고딕체", 5), Brushes.Black, pos.X - 10, pos.Y - 20);
                                pen_robot.Dispose();
                            }
                        }
                    }
                }
                if (strSelectedMissionID != "")
                {
                    int mcnt = Data.Instance.missionlisttable.missioninfo.Count;
                    for (int cntidx = 0; cntidx < mcnt; cntidx++)
                    {
                        if (Data.Instance.missionlisttable.missioninfo[cntidx].strMisssionID == strSelectedMissionID)
                        {
                            if (Data.Instance.missionlisttable.missioninfo[cntidx].work != "")
                            {
                                string strwork = Data.Instance.missionlisttable.missioninfo[cntidx].work;

                                WorkFlowGoal db_missiondata = new WorkFlowGoal();

                                db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strwork);

                                int cnt = db_missiondata.work.Count;

                                Pen pen2 = new Pen(Brushes.Blue, 3);
                                pen2.DashStyle = DashStyle.Dash;
                                List<PointF> linepos = new List<PointF>();

                                posRectList.Clear();

                                if (cnt > 0)
                                {
                                    for (int i = 0; i < cnt; i++)
                                    {
                                        Action act = db_missiondata.work[i];
                                        string strtype = "";
                                        if (act.action_type == (int)Data.ACTION_TYPE.Goal_Point)
                                        {
                                            float fx = act.action_args[0];
                                            float fy = act.action_args[1];
                                            float ftheta = act.action_args[2];

                                            float cellX = fx / resoultion1;
                                            float cellY = fy / resoultion1;

                                            PointF pos = new PointF();
                                            pos.X = dOrignX + cellX * (float)Wheelratio;
                                            pos.Y = dOrignY - cellY * (float)Wheelratio;
                                            linepos.Add(pos);

                                            Rectangle rectpos = new Rectangle();
                                            rectpos.X = (int)(pos.X - 50);
                                            rectpos.Y = (int)(pos.Y - 50);//4
                                            rectpos.Width = 100;
                                            rectpos.Height = 100; //8
                                            Pen penP = new Pen(Brushes.Gray, 1);

                                            posRectList.Add(rectpos);
                                            g.DrawString(string.Format("A{0}", i), new Font("고딕체", 5), Brushes.Black, rectpos.X, rectpos.Y - 10);
                                            g.DrawRectangle(penP, rectpos);
                                        }
                                        else
                                        {
                                            Rectangle rectpos = new Rectangle();
                                            rectpos.X = -1000;
                                            rectpos.Y = -1000;
                                            rectpos.Width = 8;
                                            rectpos.Height = 8;
                                            posRectList.Add(rectpos);
                                        }
                                    }


                                    if (linepos.Count > 0)
                                    {
                                        Pen pen3 = new Pen(Brushes.Yellow, 2);
                                        for (int j = 0; j < linepos.Count; j++)
                                        {
                                            if (j == linepos.Count - 1)
                                            { }
                                            else g.DrawLine(pen3, linepos[j], linepos[j + 1]);
                                        }
                                        pen3.Dispose();
                                    }

                                    pen2.Dispose();

                                }
                            }
                            break;
                        }
                    }


                }
                pb_map.Image = displayBMP;
                if (pb_map.Image != null)
                {
                    sourceBMP.Dispose();
                    g.Dispose();
                    pen4.Dispose();
                }

            }
            catch
            {

            }
        }
        Image ZoomIn(Image img, double nresolution)
        {

            Bitmap bmp = new Bitmap(img, (int)(img.Width * nresolution), (int)(img.Height * nresolution));
            bmp.SetResolution((int)(bmp.VerticalResolution * nresolution), (int)(bmp.HorizontalResolution * nresolution));
            Graphics g = Graphics.FromImage(bmp);

            g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
            return bmp;
        }
        private void Map_Robot_Image_Processing2(ref Bitmap bmSource, int Width, int Height, byte[] sourcemapvalue, string strfiltername)
        {
            try
            {
                //
                // 여기서 부터 Picture Box의 이미지를 복사해 오는 부분입니다
                //
                Rectangle rect = new Rectangle(0, 0, bmSource.Width, bmSource.Height);
                System.Drawing.Imaging.BitmapData bmpData =
                    bmSource.LockBits(rect, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                    bmSource.PixelFormat);

                IntPtr ptr = bmpData.Scan0;
                byte[] rgbValues;


                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    rgbValues = new byte[Width * Height * 4];
                }
                else
                {
                    rgbValues = new byte[Width * Height];
                }

                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    var k = 0;
                    for (var y = 0; y < Height; y++)
                    {
                        for (var x = 0; x < Width; x++)
                        {
                            byte btemp = sourcemapvalue[y * Width + x];

                            if (strfiltername == "gray" || strfiltername == "cost" || strfiltername == "globalcost")
                            {
                                //if (btemp == 0) btemp = 0xff;
                                //else if (btemp == 0xff) btemp = 0xf0;
                            }
                            else
                            {
                                if (btemp == 0) btemp = 0xff;
                            }


                            #region  gray filter 그레이는 r,g,b가 동일 값으로 들어감
                            if (strfiltername == "gray" || strfiltername == "cost" || strfiltername == "globalcost")
                            {
                                rgbValues[k] = btemp;
                                rgbValues[k + 1] = btemp;
                                rgbValues[k + 2] = btemp;
                            }


                            #endregion

                            k += 4;
                        }
                    }
                }

                else
                {
                    for (int i = 0; i < Width * Height; i++)
                    {
                        rgbValues[i] = sourcemapvalue[i];
                    }
                }

                //
                // 여기까지가 Marshal Copy로 rgbValues 버퍼로 영상을 Copy해 오는 부분입니다.
                //

                //
                // 여기서부터 2차원 배열로 1차원 영상을 옮기는 부분입니다
                //
                double[,] Source = new double[Width, Height];
                double[,] Target = new double[Width, Height];

                int XPos, YPos = 0;
                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    for (int nH = 0; nH < Height; nH++)
                    {
                        XPos = 0;

                        if (strfiltername == "gray")
                            XPos = 0; //gray xpos

                        for (int nW = 0; nW < Width; nW++)
                        {
                            Source[nW, nH] = rgbValues[XPos + YPos];
                            Target[nW, nH] = rgbValues[XPos + YPos];
                            XPos += 4;
                        }
                        YPos += Width * 4;
                    }
                }
                else
                {
                    for (int nH = 0; nH < Height; nH++)
                    {
                        XPos = 0;
                        for (int nW = 0; nW < Width; nW++)
                        {
                            Source[nW, nH] = rgbValues[XPos + YPos];
                            Target[nW, nH] = rgbValues[XPos + YPos];
                            XPos++;
                        }
                        YPos += Width;
                    }
                }

                //
                // 여기까지는 2차원 배열로 영상을 복사하는 부분입니다.
                //

                //좌우반전//
                int nconvert = 0;

                //상하반전
                nconvert = 0;
                double[,] bconvertTarget = new double[Width, Height];
                for (int nh = 0; nh < Height; nh++)
                {
                    nconvert = 0;
                    for (int nw = 0; nw < Width; nw++)
                    {
                        bconvertTarget[nw, Height - nh - 1] = Target[nw, nh];
                        //nconvert++;
                    }
                }



                //
                // 여기서 부터는 2차원 배열을 다시 1차원 버터로 옮기는 부분입니다
                //

                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    rgbValues = new byte[Width * Height * 4];
                }
                else
                {
                    rgbValues = new byte[Width * Height];
                }

                YPos = 0;
                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    for (int nH = 0; nH < Height; nH++)
                    {
                        XPos = 0;
                        for (int nW = 0; nW < Width; nW++)
                        {

                            #region  gray filter 그레이는 r,g,b가 동일 값으로 들어감
                            if (strfiltername == "gray")
                            {
                                bconvertTarget[nW, nH] = (byte)(255 - (255 * bconvertTarget[nW, nH]) / 100);
                                rgbValues[XPos + YPos] = (byte)bconvertTarget[nW, nH];
                                rgbValues[XPos + YPos + 1] = (byte)bconvertTarget[nW, nH];
                                rgbValues[XPos + YPos + 2] = (byte)bconvertTarget[nW, nH];
                            }

                            #endregion

                            if (strfiltername == "globalcost")
                            {
                                bconvertTarget[nW, nH] = (byte)(255 - (255 * bconvertTarget[nW, nH]) / 100);
                                rgbValues[XPos + YPos] = (byte)bconvertTarget[nW, nH];
                                rgbValues[XPos + YPos + 1] = (byte)bconvertTarget[nW, nH];
                                rgbValues[XPos + YPos + 2] = (byte)bconvertTarget[nW, nH];
                            }

                            #region  cost map filter
                            if (strfiltername == "cost")
                            {
                                //cost map 색상 테스트
                                if (bconvertTarget[nW, nH] < 36)
                                {
                                    rgbValues[XPos + YPos] = 0xff;
                                    rgbValues[XPos + YPos + 1] = 0xff;
                                    rgbValues[XPos + YPos + 2] = 0xff;
                                    rgbValues[XPos + YPos + 3] = 255;
                                }

                                else if (bconvertTarget[nW, nH] == 100) // lethal obstacle values (100) in purple
                                {
                                    rgbValues[XPos + YPos] = 255;
                                    rgbValues[XPos + YPos + 1] = 0;
                                    rgbValues[XPos + YPos + 2] = 255;
                                    rgbValues[XPos + YPos + 3] = 255;
                                }
                                else if (bconvertTarget[nW, nH] > 101 && bconvertTarget[nW, nH] < 128) // illegal positive values in green
                                {
                                    rgbValues[XPos + YPos] = 0;
                                    rgbValues[XPos + YPos + 1] = 255;
                                    rgbValues[XPos + YPos + 2] = 0;
                                    rgbValues[XPos + YPos + 3] = 255;
                                }

                                else if (bconvertTarget[nW, nH] > 155 && bconvertTarget[nW, nH] < 255) // illegal negative (char) values in shades of red/yellow
                                {
                                    rgbValues[XPos + YPos] = 255;
                                    rgbValues[XPos + YPos + 1] = (byte)((255 * (bconvertTarget[nW, nH] - 128)) / (254 - 128));
                                    rgbValues[XPos + YPos + 2] = 0;
                                    rgbValues[XPos + YPos + 3] = 255;
                                }
                                else
                                {
                                    rgbValues[XPos + YPos] = 255;
                                    rgbValues[XPos + YPos + 1] = 255;
                                    rgbValues[XPos + YPos + 2] = (byte)bconvertTarget[nW, nH];
                                    rgbValues[XPos + YPos + 3] = 255;
                                }


                            }
                            #endregion

                            XPos += 4;
                        }
                        YPos += Width * 4;

                    }
                }
                else
                {
                    for (int nH = 0; nH < Height; nH++)
                    {
                        XPos = 0;
                        for (int nW = 0; nW < Width; nW++)
                        {
                            rgbValues[XPos + YPos] = (byte)bconvertTarget[nW, nH];

                            XPos++;
                        }
                        YPos += Width;
                    }
                }


                //
                // 다시 Marshal Copy로 Picture Box로 옮기는 부분입니다
                //
                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, Width * Height * 4);
                }
                else
                {
                    System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, Width * Height);
                }

                bmSource.UnlockBits(bmpData);

                //System.Drawing.Rectangle cropArea = new System.Drawing.Rectangle(6, 6, Width - 12, Height - 12);
                System.Drawing.Rectangle cropArea = new System.Drawing.Rectangle(0, 0, Width, Height);
                Bitmap bmpTemp = bmSource.Clone(cropArea, bmSource.PixelFormat);
                bmSource.Dispose();
                bmSource = null;
                bmSource = (Bitmap)(bmpTemp.Clone());
            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("Map_Robot_Image_Processing2 err :={0}", ex.Message.ToString());
            }

        }
        public void onMapDisplay1()
        {
            try
            {
                Bitmap bmSource = new Bitmap(nSourceMapWidth, nSourceMapHeight, PixelFormat.Format32bppRgb);//, PixelFormat.Format8bppIndexed);

                Bitmap bmMergeOKSource = new Bitmap(nSourceMapWidth, nSourceMapHeight, PixelFormat.Format32bppRgb);//, PixelFormat.Format8bppIndexed);

                Map_Robot_Image_Processing2(ref bmSource, bmSource.Width, bmSource.Height, sourceMapValues, "gray");

                dOrignX = ((ori_x * -1) / resoultion1);
                dOrignY = ((ori_y) / resoultion1);

                if (dOrignY < 0) dOrignY *= -1;
                dOrignY = nSourceMapHeight - dOrignY;

                dOrignX = dOrignX * (float)Wheelratio + translate_x;
                dOrignY = dOrignY * (float)Wheelratio + translate_y;

                Image imgSource_Chg;
                imgSource_Chg = ZoomIn(bmSource, Wheelratio);

                Bitmap translateBmp = new Bitmap(imgSource_Chg.Width, imgSource_Chg.Height);
                translateBmp.SetResolution(imgSource_Chg.HorizontalResolution, imgSource_Chg.VerticalResolution);

                Graphics g = Graphics.FromImage(translateBmp);
                g.TranslateTransform(translate_x, translate_y);
                g.DrawImage(imgSource_Chg, new PointF(0, 0));

                pb_map.Image = translateBmp;

                pb_map_Paint();
                //picturebox_paint();
                bmSource.Dispose();
                bmMergeOKSource.Dispose();



            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("onMapDisplay1 err :={0}", ex.Message.ToString());
            }
        }
        private void loadMAP()
        {
            DataSet ds = new DataSet();
            string sql = "select * from map_t order by idx DESC limit 1";
            MySqlDataAdapter adapter = new MySqlDataAdapter(sql, Data.Instance.G_SqlCon);
            string temp = "";
            adapter.Fill(ds, "map_t");
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow r in ds.Tables[0].Rows)
                {
                    //Console.WriteLine(r["map_data"]);
                    mapstate = JsonConvert.DeserializeObject<MapState>(r["map_data"].ToString());
                    mapinfo = JsonConvert.DeserializeObject<MapInfo>(r["map_data"].ToString());
                    //Console.WriteLine(mapstate.data);
                }
            }

            sourceMapValues = mapstate.data.ToArray().Select(x => (byte)x).ToArray();
            for (var y = 0; y < width * height; y++)
            {
                sourceMapValues[y] = (byte)mapstate.data[y];

            }
        }

        int width;
        int height;
        float resoultion1;
        float ori_x;
        float ori_y;
        float ratio = 10;
        float translate_x = 0;
        float translate_y = 0;
        float dOrignX = 0;
        float dOrignY = 0;
        int nSourceMapWidth = 0;
        int nSourceMapHeight = 0;

        private double Wheelratio = 0.26F;
        private Point clickPoint;
        private Point imgPoint;
        private Rectangle imgRect;
        public void aboutMove()
        {


            imgPoint = new Point(pb_map.Width / 2, pb_map.Height / 2);
            imgRect = new Rectangle(0, 0, pb_map.Width, pb_map.Height);
            Wheelratio = 1;
            clickPoint = imgPoint;

        }

        private void picturebox_Wheel(object sender, MouseEventArgs e)
        {
            int lines = e.Delta * SystemInformation.MouseWheelScrollLines / 120;
            PictureBox pb = (PictureBox)sender;

            if (lines > 0)
            {
                Wheelratio *= 1.1F;
                if (Wheelratio > 100.0) Wheelratio = 100.0;
            }
            else if (lines < 0)
            {
                Wheelratio *= 0.9F;
                //if (Wheelratio < 1) Wheelratio = 1;
            }

            imgRect.Width = (int)Math.Round(imgRect.Width * ratio);
            imgRect.Height = (int)Math.Round(imgRect.Height * ratio);
            imgRect.X = (int)Math.Round(pb.Width / 2 - imgPoint.X * ratio);
            imgRect.Y = (int)Math.Round(pb.Height / 2 - imgPoint.Y * ratio);

            pb_map_Paint();
            //picturebox_paint();
        }

        MapState mapstate = new MapState();
        MapInfo mapinfo = new MapInfo();
        byte[] sourceMapValues;
        public void MapInfoComplete()
        {
            try
            {
                nSourceMapWidth = width;
                nSourceMapHeight = height;

                Size sz = pb_map.Size;
                if (sz.Width > width)
                {
                    float tmpratio_w = (float)(sz.Width) / width;
                    float tmpratio_h = 0;
                    if (sz.Height > height)
                    {
                        tmpratio_h = (float)(sz.Height) / height;
                    }
                    if (tmpratio_w > tmpratio_h)
                        ratio = tmpratio_h;
                    else ratio = tmpratio_w;

                }
                onMapDisplay1();

            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("MapInfoComplete err :={0}", ex.Message.ToString());
            }
        }
        private void pb_map_Paint()
        {
            try
            {

                //Graphics e = pb_map.CreateGraphics();

                Pen pen = new Pen(Brushes.Red, 1);
                pen.DashStyle = DashStyle.Dash;

                Bitmap bmSource = new Bitmap(nSourceMapWidth, nSourceMapHeight, PixelFormat.Format32bppRgb);//, PixelFormat.Format8bppIndexed);

                Bitmap bmMergeOKSource = new Bitmap(nSourceMapWidth, nSourceMapHeight, PixelFormat.Format32bppRgb);//, PixelFormat.Format8bppIndexed);

                Map_Robot_Image_Processing2(ref bmSource, bmSource.Width, bmSource.Height, sourceMapValues, "gray");

                dOrignX = ((ori_x * -1) / resoultion1);
                dOrignY = ((ori_y) / resoultion1);

                if (dOrignY < 0) dOrignY *= -1;
                dOrignY = nSourceMapHeight - dOrignY;

                dOrignX = dOrignX * (float)Wheelratio + translate_x;
                dOrignY = dOrignY * (float)Wheelratio + translate_y;

                Image imgSource_Chg;
                imgSource_Chg = ZoomIn(bmSource, (float)Wheelratio);

                Bitmap translateBmp = new Bitmap(imgSource_Chg.Width, imgSource_Chg.Height);
                translateBmp.SetResolution(imgSource_Chg.HorizontalResolution, imgSource_Chg.VerticalResolution);

                Graphics g = Graphics.FromImage(translateBmp);
                g.TranslateTransform(translate_x, translate_y);
                g.DrawImage(imgSource_Chg, new PointF(0, 0));
                if (pb_map.Image != null)
                {
                    g.DrawLine(pen, (float)dOrignX - 10, (float)dOrignY, (float)dOrignX + 10, (float)dOrignY);
                    g.DrawLine(pen, (float)dOrignX, (float)dOrignY - 10, (float)dOrignX, (float)dOrignY + 10);
                    g.DrawEllipse(Pens.Red, dOrignX - 10, dOrignY - 10, 20, 20);
                    //e.Graphics.FillEllipse(Brushes.Blue, dOrignX - 10, dOrignY - 10, 20, 20);


                    if (strSelectedMissionID != "")
                    {
                        int mcnt = Data.Instance.missionlisttable.missioninfo.Count;
                        for (int cntidx = 0; cntidx < mcnt; cntidx++)
                        {
                            if (Data.Instance.missionlisttable.missioninfo[cntidx].strMisssionID == strSelectedMissionID)
                            {
                                if (Data.Instance.missionlisttable.missioninfo[cntidx].work != "")
                                {
                                    string strwork = Data.Instance.missionlisttable.missioninfo[cntidx].work;

                                    WorkFlowGoal db_missiondata = new WorkFlowGoal();

                                    db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strwork);

                                    int cnt = db_missiondata.work.Count;

                                    Pen pen2 = new Pen(Brushes.Blue, 3);
                                    pen2.DashStyle = DashStyle.Dash;
                                    List<PointF> linepos = new List<PointF>();

                                    posRectList.Clear();

                                    if (cnt > 0)
                                    {
                                        for (int i = 0; i < cnt; i++)
                                        {
                                            Action act = db_missiondata.work[i];
                                            string strtype = "";
                                            if (act.action_type == (int)Data.ACTION_TYPE.Goal_Point)
                                            {
                                                float fx = act.action_args[0];
                                                float fy = act.action_args[1];
                                                float ftheta = act.action_args[2];

                                                float cellX = fx / resoultion1;
                                                float cellY = fy / resoultion1;

                                                PointF pos = new PointF();
                                                pos.X = dOrignX + cellX * (float)Wheelratio;
                                                pos.Y = dOrignY - cellY * (float)Wheelratio;
                                                linepos.Add(pos);

                                                Rectangle rectpos = new Rectangle();
                                                rectpos.X = (int)(pos.X - 4);
                                                rectpos.Y = (int)(pos.Y - 4);
                                                rectpos.Width = 8;
                                                rectpos.Height = 8;
                                                Pen penP = new Pen(Brushes.Gray, 1);

                                                posRectList.Add(rectpos);
                                                g.DrawString(string.Format("A{0}", i), new Font("고딕체", 5), Brushes.Black, rectpos.X, rectpos.Y - 10);
                                                g.DrawRectangle(penP, rectpos);
                                            }
                                            else
                                            {
                                                Rectangle rectpos = new Rectangle();
                                                rectpos.X = -1000;
                                                rectpos.Y = -1000;
                                                rectpos.Width = 8;
                                                rectpos.Height = 8;
                                                posRectList.Add(rectpos);
                                            }
                                        }


                                        if (linepos.Count > 0)
                                        {
                                            Pen pen3 = new Pen(Brushes.Yellow, 2);
                                            for (int j = 0; j < linepos.Count; j++)
                                            {
                                                if (j == linepos.Count - 1)
                                                { }
                                                else g.DrawLine(pen3, linepos[j], linepos[j + 1]);
                                            }
                                            pen3.Dispose();
                                        }

                                        pen2.Dispose();

                                    }
                                }
                                break;
                            }
                        }


                    }


                    foreach (KeyValuePair<string, Robot_RegInfo> info in Data.Instance.Robot_RegInfo_list)
                    {
                        string strrobotid = info.Key;

                        //    for (int idx = 0; idx < mainform.G_robotList.Count; idx++)
                        // {
                        if (Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate != null)
                        {
                            if (Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg != null)
                            {
                                float robotx = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg.pose.x;
                                float roboty = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg.pose.y;
                                float robottheta = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg.pose.theta;

                                float cellX = robotx / resoultion1;
                                float cellY = roboty / resoultion1;

                                PointF pos = new PointF();
                                pos.X = dOrignX + cellX * (float)Wheelratio;
                                pos.Y = dOrignY - cellY * (float)Wheelratio;
                                Pen pen_robot = new Pen(Brushes.BlueViolet, 3);
                                pen_robot.DashStyle = DashStyle.Solid;
                                g.DrawEllipse(pen_robot, pos.X - 10, pos.Y - 10, 20, 20);
                                g.DrawString(string.Format("{0}", strrobotid), new Font("고딕체", 5), Brushes.Black, pos.X - 10, pos.Y - 20);

                            }
                        }
                    }



                    Pen pen4 = new Pen(Brushes.Magenta, 2);
                    pen4.DashStyle = DashStyle.Dot;

                    pen4.Dispose();

                }
                pb_map.Image = translateBmp;

                //pb_map.Invalidate();


                bmSource.Dispose();
                bmMergeOKSource.Dispose();



            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("onMapDisplay1 err :={0}", ex.Message.ToString());
            }
            finally
            {
            }
        }

        string strSelectedMissionID;
        int nSelectedActionidx;
        List<Rectangle> posRectList = new List<Rectangle>();
        bool bPosRectSelect = false;
        int nPosRectidx = 0;



        public void onActionDataDP(int nselectedidx)
        {
            int missioncnt = Data.Instance.missionlisttable.missioninfo.Count;
            if (missioncnt > 0)
            {
                for (int i = 0; i < missioncnt; i++)
                {
                    if (Data.Instance.missionlisttable.missioninfo[i].strMisssionID == strSelectedMissionID)
                    {
                        string strwork = Data.Instance.missionlisttable.missioninfo[i].work;

                        WorkFlowGoal db_missiondata = new WorkFlowGoal();

                        db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strwork);

                        int cnt = db_missiondata.work.Count;

                        if (cnt > 0)
                        {
                            Action act = db_missiondata.work[nselectedidx];

                            if (act.action_type == (int)Data.ACTION_TYPE.Goal_Point)
                            {
                                dockingPanel.Enabled = false;
                                waypointPanel.Enabled = true;
                                onActionOptCtrlClear(true, false, false, false);
                                float x = act.action_args[0];
                                float y = act.action_args[1];
                                float theta = act.action_args[2];

                                xposTextbox.Text = string.Format("{0:f2}", x);
                                yposTextbox.Text = string.Format("{0:f2}", y);
                                thetaTextbox.Text = string.Format("{0:f2}", theta);

                                int paramcnt = act.action_params.Count;
                                for (int pi = 0; pi < paramcnt; pi++)
                                {
                                    string strparamname = act.action_params[pi].param_name;
                                    string strvalue = act.action_params[pi].value;

                                    if (strparamname == "max_trans_vel")
                                    {
                                        maxveloTextbox.Text = strvalue;
                                    }
                                    else if (strparamname == "xy_goal_tolerance")
                                    {
                                        xyTextbox.Text = strvalue;

                                    }
                                    else if (strparamname == "yaw_goal_tolerance")
                                    {
                                        yawTextbox.Text = strvalue;
                                    }
                                    else if (strparamname == "passing_flag")
                                    {
                                        bool passingChk = passingCheck.Checked;
                                    }
                                    else if (strparamname == "avoid")
                                    {
                                    }
                                }
                            }
                            else if (act.action_type == (int)Data.ACTION_TYPE.Docking)
                            {
                                dockingPanel.Enabled = true;
                                waypointPanel.Enabled = false;
                                float dockingDirection = act.action_args[0]; // 1 전면, -1 후면 도킹
                                float dockingFrontdistance = act.action_args[1]; // 도킹지점까지의 전방 거리 단위 : meter

                                dockingLocation.Text = dockingDirection.ToString();
                                dockingFrontoffset.Text = dockingFrontdistance.ToString();


                                int paramcnt = act.action_params.Count;
                                for (int pi = 0; pi < paramcnt; pi++)
                                {
                                    string strparamname = act.action_params[pi].param_name;
                                    string strvalue = act.action_params[pi].value;



                                    if (strparamname == "center_offset")
                                    {
                                        dockingCenteroffset.Text = strvalue;
                                    }
                                    else if (strparamname == "mark_size")
                                    {
                                        dockingMarkersize.Text = strvalue;
                                    }
                                    else if (strparamname == "scan_view")
                                    {
                                        dockingScanview.Text = strvalue;
                                    }

                                }
                            }
                            //else if (act.action_type == (int)Data.ACTION_TYPE.Basic_Move)
                            //{
                            //    onActionOptCtrlClear(false, true, false, false);

                            //    float fmode = act.action_args[0];
                            //    float fvalue = act.action_args[1];

                            //    if (fmode == 0) cboBasicmove_mode.SelectedIndex = 0;
                            //    else cboBasicmove_mode.SelectedIndex = 1;

                            //    txtBasicmove_action.Text = string.Format("{0}", fvalue);
                            //}
                            //else if (act.action_type == (int)Data.ACTION_TYPE.Stable_Pallet)
                            //{
                            //    onActionOptCtrlClear(false, false, true, false);

                            //    float fmode = act.action_args[0];
                            //    float fdist = act.action_args[1];
                            //    float fbfmode = act.action_args[2];


                            //    if (fmode == -1) cboPalletmode.SelectedIndex = 0;
                            //    else if (fmode == 0) cboPalletmode.SelectedIndex = 1;
                            //    else if (fmode == 1) cboPalletmode.SelectedIndex = 2;

                            //    txtPalletDist.Text = string.Format("{0}", fdist);

                            //    if (fbfmode == 1) radioButton_forward.Checked = true;
                            //    else radioButton_backward.Checked = true;

                            //    int paramcnt = act.action_params.Count;
                            //    for (int pi = 0; pi < paramcnt; pi++)
                            //    {
                            //        string strparamname = act.action_params[pi].param_name;
                            //        string strvalue = act.action_params[pi].value;

                            //        if (strparamname == "pal_check")
                            //            txtPalletID.Text = strvalue;
                            //    }

                            //}
                            //else if (act.action_type == (int)Data.ACTION_TYPE.Action_wait)
                            //{
                            //    onActionOptCtrlClear(false, false, false, true);
                            //    float fmode = act.action_args[0];

                            //    if (fmode == 0) cboXisWait_mode.SelectedIndex = 0;
                            //    else
                            //    {
                            //        txtXisWaitTime.Text = string.Format("{0}", fmode);
                            //        cboXisWait_mode.SelectedIndex = 1;
                            //    }
                            //    int paramcnt = act.action_params.Count;
                            //    for (int pi = 0; pi < paramcnt; pi++)
                            //    {
                            //        string strparamname = act.action_params[pi].param_name;
                            //        string strvalue = act.action_params[pi].value;

                            //        if (strparamname == "xis_check")
                            //            txtXisWait_ID.Text = strvalue;
                            //    }

                            //}

                        }

                        break;
                    }
                }
            }
        }

        private void onActionOptCtrlClear(bool v1, bool v2, bool v3, bool v4)
        {
            xposTextbox.Text = "";
            yposTextbox.Text = "";
            thetaTextbox.Text = "";
            maxveloTextbox.Text = "";
            xyTextbox.Text = "";
            yawTextbox.Text = "";
            passingCheck.Checked = false;
        }

        private void onMissionListRead()
        {
            try
            {

                mainform.dbBridge.onDBRead_Missionlist();

                int ncnt = Data.Instance.missionlisttable.missioninfo.Count;
            }
            catch (Exception ex)
            {
                Console.WriteLine("onMissionListRead err=" + ex.Message.ToString());
            }

        }

        private void actionView()
        {

            int nselectedidx = actionIDX;
            strSelectedMissionID = Data.Instance.missionlisttable.missioninfo[nselectedidx].strMisssionID;
            nSelectedActionidx = 0;

            if (Data.Instance.missionlisttable.missioninfo[nselectedidx].work != "")
            {
                string strwork = Data.Instance.missionlisttable.missioninfo[nselectedidx].work;

                WorkFlowGoal db_missiondata = new WorkFlowGoal();

                db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strwork);

                int cnt = db_missiondata.work.Count;
                for (int i = 0; i < cnt; i++)
                {
                    Action act = db_missiondata.work[i];
                    string strtype = "";
                    if (act.action_type == (int)Data.ACTION_TYPE.Goal_Point)
                    {
                        strtype = "Goal_Point";
                    }
                    else if (act.action_type == (int)Data.ACTION_TYPE.Basic_Move)
                    {
                        strtype = "Basic_Move";
                    }
                    else if (act.action_type == (int)Data.ACTION_TYPE.Stable_Pallet)
                    {
                        strtype = "Pallet";
                    }
                    else if (act.action_type == (int)Data.ACTION_TYPE.Action_wait)
                    {
                        strtype = "Action_wait";
                    }
                    else if (act.action_type == (int)Data.ACTION_TYPE.Docking)
                    {
                        strtype = "Docking";
                    }
                    //textBox4.AppendText("Action("+ strtype+")\r\n");
                    //gridView2.AddNewRow();
                    //int rowHandle = gridView2.GetRowHandle(gridView2.DataRowCount);
                    //if(gridView2.IsNewItemRow(rowHandle))
                    //{
                    //    gridView2.SetRowCellValue(rowHandle, gridView2.Columns[0], strtype);
                    //}

                    actionList.Items.Add(string.Format("Action({0})", strtype));
                }
            }
        }
        int actionIDX;
        int gridviewFocus;
        private void gridView1_RowCellClick(object sender, DevExpress.XtraGrid.Views.Grid.RowCellClickEventArgs e)
        {
            actionIDX = gridView1.GetDataSourceRowIndex(e.RowHandle);
            actionList.Items.Clear();
            gridviewFocus = gridView1.FocusedRowHandle;
            try
            {
                if (actionIDX > -1)
                {
                    int nselectedidx = actionIDX;

                    strSelectedMissionID = Data.Instance.missionlisttable.missioninfo[nselectedidx].strMisssionID;
                    nSelectedActionidx = 0;

                    if (Data.Instance.missionlisttable.missioninfo[nselectedidx].work != "")
                    {
                        string strwork = Data.Instance.missionlisttable.missioninfo[nselectedidx].work;

                        WorkFlowGoal db_missiondata = new WorkFlowGoal();

                        db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strwork);

                        int cnt = db_missiondata.work.Count;
                        for (int i = 0; i < cnt; i++)
                        {
                            Action act = db_missiondata.work[i];
                            string strtype = "";
                            if (act.action_type == (int)Data.ACTION_TYPE.Goal_Point)
                            {
                                strtype = "Goal_Point";
                            }
                            else if (act.action_type == (int)Data.ACTION_TYPE.Basic_Move)
                            {
                                strtype = "Basic_Move";
                            }
                            else if (act.action_type == (int)Data.ACTION_TYPE.Stable_Pallet)
                            {
                                strtype = "Pallet";
                            }
                            else if (act.action_type == (int)Data.ACTION_TYPE.Action_wait)
                            {
                                strtype = "Action_wait";
                            }
                            else if (act.action_type == (int)Data.ACTION_TYPE.Docking)
                            {
                                strtype = "Docking";
                            }
                            //textBox4.AppendText("Action("+ strtype+")\r\n");
                            //gridView2.AddNewRow();
                            //int rowHandle = gridView2.GetRowHandle(gridView2.DataRowCount);
                            //if(gridView2.IsNewItemRow(rowHandle))
                            //{
                            //    gridView2.SetRowCellValue(rowHandle, gridView2.Columns[0], strtype);
                            //}

                            actionList.Items.Add(string.Format("Action({0})", strtype));
                        }
                        pb_map_Paint();
                        //picturebox_paint();

                    }
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine("listBox_Mission_SelectedIndexChanged err=" + ex.Message.ToString());
            }
        }
        float nangluar_x1 = 0;
        float nangluar_x2 = 0;
        float nangluar_y1 = 0;
        float nangluar_y2 = 0;
        float W_x_1;
        float W_y_1;
        float W_x_2;
        float W_y_2;
        PointF initposset_first = new PointF();
        PointF initposset_second = new PointF();
        Rectangle RectTmp = new Rectangle();

        private void pb_map_MouseDown(object sender, MouseEventArgs e)
        {
            int nx = e.X;
            int ny = e.Y;
            //txtXcell.Text = string.Format("{0}", e.X);
            //txtYcell.Text = string.Format("{0}", e.Y);

            //  nx = (int)(nx - translate_x);
            //  ny = (int)(ny - translate_y);

            float tmpOriginX = dOrignX / (float)Wheelratio;
            float tmpOriginY = dOrignY / (float)Wheelratio;

            float currXpos = (float)(((nx - dOrignX) * resoultion1)) / (float)Wheelratio;
            float currYpos = (float)(((ny - dOrignY) * resoultion1)) / (float)Wheelratio;
            nangluar_x1 = currXpos;
            nangluar_y1 = currYpos;




            W_x_1 = e.X;
            W_y_1 = e.Y;

            initposset_first = new PointF();



            if (posRectList.Count > 0)
            {
                for (int i = 0; i < posRectList.Count; i++)
                {
                    if (posRectList[i].Contains(e.X, e.Y))
                    {
                        bPosRectSelect = true;
                        nPosRectidx = i;
                        break;
                    }
                }
            }

        }
        private void pb_map_MouseMove(object sender, MouseEventArgs e)
        {
            int nx = e.X;
            int ny = e.Y;
            //txtXcell.Text = string.Format("{0}", e.X);
            //txtYcell.Text = string.Format("{0}", e.Y);


            //    nx = (int)(nx - translate_x);
            //   ny = (int)(ny - translate_y);

            float currXpos = (float)(((nx - dOrignX) * resoultion1)) / (float)Wheelratio;
            float currYpos = (float)(((ny - dOrignY) * resoultion1)) / (float)Wheelratio;




            if (bPosRectSelect)
            {
                if (posRectList.Count > 0)
                {
                    int mcnt = Data.Instance.missionlisttable.missioninfo.Count;
                    for (int cntidx = 0; cntidx < mcnt; cntidx++)
                    {
                        if (Data.Instance.missionlisttable.missioninfo[cntidx].strMisssionID == strSelectedMissionID)
                        {

                            if (Data.Instance.missionlisttable.missioninfo[cntidx].work != "")
                            {
                                string strwork = Data.Instance.missionlisttable.missioninfo[cntidx].work;

                                WorkFlowGoal db_missiondata = new WorkFlowGoal();

                                db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strwork);

                                int cnt = db_missiondata.work.Count;

                                Action act = db_missiondata.work[nPosRectidx];

                                act.action_args[0] = currXpos;
                                act.action_args[1] = currYpos * -1;

                                db_missiondata.work[nPosRectidx] = act;

                                string strobj = JsonConvert.SerializeObject(db_missiondata);

                                Data.Instance.missionlisttable.missioninfo[cntidx].work = strobj;
                            }
                            onActionDataDP(nPosRectidx);
                            nSelectedActionidx = nPosRectidx;
                            actionList.SelectedIndex = nSelectedActionidx;

                            break;
                        }
                    }
                    //pb_map.Invalidate();
                    pb_map_Paint();

                }
            }
        }
        bool bMapMouseDN = false;
        private void pb_map_MouseUp(object sender, MouseEventArgs e)
        {
            int nx = e.X;
            int ny = e.Y;
            //txtXcell.Text = string.Format("{0}", e.X);
            //txtYcell.Text = string.Format("{0}", e.Y);

            //  nx = (int)(nx - translate_x);
            //  ny = (int)(ny - translate_y);

            float tmpOriginX = dOrignX / (float)Wheelratio;
            float tmpOriginY = dOrignY / (float)Wheelratio;

            float currXpos = (float)(((nx - dOrignX) * resoultion1)) / (float)Wheelratio;
            float currYpos = (float)(((ny - dOrignY) * resoultion1)) / (float)Wheelratio;

            nangluar_x2 = currXpos;
            nangluar_y2 = currYpos;



            W_x_2 = e.X;
            W_y_2 = e.Y;

            if (bMapMouseDN)
            {
                RectangleF rectT = RectTmp;
                //rectT.X = (float)((rectT.X / ratio) -translate_x);
                //rectT.Y = (float)((rectT.Y / ratio)-translate_y);

                rectT.X = (float)((rectT.X - translate_x) / (float)Wheelratio);
                rectT.Y = (float)((rectT.Y - translate_y) / (float)Wheelratio);

                rectT.Width = (float)(rectT.Width / (float)Wheelratio);
                rectT.Height = (float)(rectT.Height / (float)Wheelratio);


            }


            bMapMouseDN = false;
            bPosRectSelect = false;
        }

        private void actionList_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (actionList.SelectedIndex > -1)
                {
                    int nselectedidx = actionList.SelectedIndex;

                    nSelectedActionidx = nselectedidx;

                    onActionDataDP(nselectedidx);

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("listBox_ActionData_SelectedIndexChanged err=" + ex.Message.ToString());
            }
        }

        private int parameterValue(string a)
        {
            switch (a)
            {
                case "전방":
                    return 0;
                case "좌측":
                    return 1;
                case "후방":
                    return 2;
                case "우측":
                    return 3;
                default:
                    return -1;
            }
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            try
            {
                if (strSelectedMissionID != "" && nSelectedActionidx > -1)
                {

                    int missioncnt = Data.Instance.missionlisttable.missioninfo.Count;

                    if (missioncnt > 0)
                    {
                        for (int i = 0; i < missioncnt; i++)
                        {
                            if (Data.Instance.missionlisttable.missioninfo[i].strMisssionID == strSelectedMissionID)
                            {
                                string strworks = Data.Instance.missionlisttable.missioninfo[i].work;
                                WorkFlowGoal db_missiondata = new WorkFlowGoal();
                                db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strworks);

                                string strdata = "";
                                string stractdata = "";

                                if (db_missiondata.work[nSelectedActionidx].action_type == (int)Data.ACTION_TYPE.Goal_Point)
                                {
                                    Action act = new Action();

                                    act.action_type = (int)Data.ACTION_TYPE.Goal_Point;

                                    strdata = xposTextbox.Text.ToString();
                                    if (strdata == "") strdata = "0";
                                    act.action_args.Add(float.Parse(strdata));

                                    strdata = yposTextbox.Text.ToString();
                                    if (strdata == "") strdata = "0";
                                    act.action_args.Add(float.Parse(strdata));

                                    strdata = thetaTextbox.Text.ToString();
                                    if (strdata == "") strdata = "0";
                                    act.action_args.Add(float.Parse(strdata));

                                    strdata = maxveloTextbox.Text.ToString();
                                    if (strdata == "") strdata = "0";
                                    act.action_args.Add(float.Parse(strdata));


                                    if (true)
                                    {
                                        strdata = maxveloTextbox.Text;
                                        ParameterSet param = new ParameterSet();
                                        param.param_name = "max_trans_vel";
                                        param.type = "float";
                                        param.value = strdata;
                                        act.action_params.Add(param);

                                    }
                                    if (true)
                                    {
                                        strdata = xyTextbox.Text;
                                        ParameterSet param = new ParameterSet();
                                        param.param_name = "xy_goal_tolerance";
                                        param.type = "float";
                                        param.value = strdata;
                                        act.action_params.Add(param);
                                    }
                                    if (true)
                                    {
                                        strdata = yawTextbox.Text;
                                        ParameterSet param = new ParameterSet();
                                        param.param_name = "yaw_goal_tolerance";
                                        param.type = "float";
                                        param.value = strdata;
                                        act.action_params.Add(param);

                                    }
                                    if (true)
                                    {
                                        bool passingChk = passingCheck.Checked;
                                        string temp = "";
                                        ParameterSet param = new ParameterSet();
                                        param.param_name = "passing_flag";
                                        param.type = "bool";
                                        if (passingChk)
                                            temp = "true";
                                        else
                                            temp = "false";
                                        param.value = temp;
                                        act.action_params.Add(param);
                                    }
                                    db_missiondata.work[nSelectedActionidx] = act;

                                }
                                else if (db_missiondata.work[nSelectedActionidx].action_type == (int)Data.ACTION_TYPE.Docking)
                                {
                                    Action act = new Action();

                                    act.action_type = (int)Data.ACTION_TYPE.Docking;

                                    strdata = dockingLocation.Text.ToString();
                                    if (strdata == "") strdata = "0";
                                    act.action_args.Add(float.Parse(strdata));

                                    strdata = dockingFrontoffset.Text.ToString();
                                    if (strdata == "") strdata = "0";
                                    act.action_args.Add(float.Parse(strdata));

                                    string tempdata = "";

                                    ParameterSet param = new ParameterSet();
                                    tempdata = dockingCenteroffset.Text;
                                    param.param_name = "center_offset";
                                    param.type = "float";
                                    param.value = tempdata;
                                    act.action_params.Add(param);

                                    param = new ParameterSet();
                                    tempdata = dockingMarkersize.Text;
                                    param.param_name = "mark_size";
                                    param.type = "float";
                                    param.value = tempdata;
                                    act.action_params.Add(param);

                                    param = new ParameterSet();
                                    if (dockingScanview.SelectedIndex == 0)
                                        tempdata = "0";
                                    else if (dockingScanview.SelectedIndex == 1)
                                        tempdata = "1";
                                    else if (dockingScanview.SelectedIndex == 2)
                                        tempdata = "2";
                                    else if (dockingScanview.SelectedIndex == 3)
                                        tempdata = "3";
                                    param.param_name = "scan_view";
                                    param.type = "int";
                                    param.value = tempdata;
                                    act.action_params.Add(param);

                                    db_missiondata.work[nSelectedActionidx] = act;
                                }
                                /*
                                else if (db_missiondata.work[nSelectedActionidx].action_type == (int)Data.ACTION_TYPE.Basic_Move)
                                {
                                    Action act = new Action();
                                    act.action_type = (int)Data.ACTION_TYPE.Basic_Move;
                                    if (cboBasicmove_mode.SelectedIndex == 0) strdata = "0";
                                    else strdata = "1";

                                    act.action_args.Add(float.Parse(strdata));


                                    strdata = txtBasicmove_action.Text.ToString();
                                    if (strdata == "") strdata = "0";
                                    act.action_args.Add(float.Parse(strdata));

                                    db_missiondata.work[nSelectedActionidx] = act;
                                }
                                else if (db_missiondata.work[nSelectedActionidx].action_type == (int)Data.ACTION_TYPE.Stable_Pallet)
                                {
                                    Action act = new Action();
                                    act.action_type = (int)Data.ACTION_TYPE.Stable_Pallet;
                                    if (cboPalletmode.SelectedIndex == 0) strdata = "-1";
                                    else if (cboPalletmode.SelectedIndex == 1) strdata = "0";
                                    else if (cboPalletmode.SelectedIndex == 2) strdata = "1";

                                    act.action_args.Add(float.Parse(strdata));

                                    strdata = txtPalletDist.Text.ToString();
                                    if (strdata == "") strdata = "0";
                                    act.action_args.Add(float.Parse(strdata));

                                    if (radioButton_forward.Checked) stractdata = "1";
                                    else stractdata = "-1";

                                    act.action_args.Add(float.Parse(stractdata));


                                    strdata = txtPalletID.Text.ToString();

                                    ParameterSet param = new ParameterSet();
                                    param.param_name = "pal_check";
                                    param.type = "float";
                                    param.value = strdata;

                                    act.action_params.Add(param);


                                    db_missiondata.work[nSelectedActionidx] = act;
                                }
                                else if (db_missiondata.work[nSelectedActionidx].action_type == (int)Data.ACTION_TYPE.Action_wait)
                                {
                                    Action act = new Action();
                                    act.action_type = (int)Data.ACTION_TYPE.Action_wait;
                                    string waittime = txtXisWaitTime.Text.ToString();
                                    string xisid = txtXisWait_ID.Text.ToString();

                                    if (cboXisWait_mode.SelectedIndex == 0)
                                    {
                                        waittime = "0";

                                    }
                                    act.action_args.Add(float.Parse(waittime));


                                    ParameterSet param = new ParameterSet();
                                    param.param_name = "xis_check";
                                    param.type = "float";
                                    param.value = xisid;

                                    act.action_params.Add(param);

                                    db_missiondata.work[nSelectedActionidx] = act;
                                }
                                */


                                string strMissionData_Json = JsonConvert.SerializeObject(db_missiondata);

                                Data.Instance.missionlisttable.missioninfo[i].work = strMissionData_Json;

                                onMissionFile_Save(strSelectedMissionID);
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine("btnMissionSave_Click err=" + ex.Message.ToString());
            }
        }
        private void onMissionFile_Save(string strMissionID)
        {
            try
            {
                onDBSave_MissionInfo(strMissionID);
            }
            catch (Exception ex)
            {
                Console.WriteLine("onMissionFile_Save err=" + ex.Message.ToString());
            }

        }
        private void onDBSave_MissionInfo(string strmissionid)
        {
            try
            {
                int missioncnt = Data.Instance.missionlisttable.missioninfo.Count;

                if (missioncnt > 0)
                {
                    for (int i = 0; i < missioncnt; i++)
                    {
                        if (Data.Instance.missionlisttable.missioninfo[i].strMisssionID == strmissionid)
                        {
                            string strworks = Data.Instance.missionlisttable.missioninfo[i].work;
                            WorkFlowGoal db_missiondata = new WorkFlowGoal();
                            db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strworks);

                            // json 묶고
                            string strMissionData_Json = JsonConvert.SerializeObject(db_missiondata);

                            //DB 에 저장
                            mainform.dbBridge.onDBUpdate_Missionlist(strmissionid, strMissionData_Json);

                            break;
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine("onDBSave_MissionInfo err=" + ex.Message.ToString());
            }
        }

        private void missionAdd_Click(object sender, EventArgs e)
        {
            try
            {
                missioneditDlg missiondlg = new missioneditDlg();

                mainform.dbBridge.onDBRead_XisInfolist();
                mainform.dbBridge.onDBRead_TriggerInfolist();

                if (missiondlg.ShowDialog() == DialogResult.OK)
                {
                    string missionname = missiondlg.strMissionName;
                    string missionid = missiondlg.strMissionID;
                    string triggerflag = "";
                    string missionlevel = "0";

                    WorkFlowGoal db_missiondata = new WorkFlowGoal();

                    db_missiondata.work_id = missionid;
                    db_missiondata.action_start_idx = 0;
                    db_missiondata.loop_flag = 1;


                    Action act = new Action();
                    act.action_type = (int)Data.ACTION_TYPE.Goal_Point;

                    act.action_args.Add(0);
                    act.action_args.Add(0);
                    act.action_args.Add(0);
                    ParameterSet paramset = new ParameterSet();
                    paramset.param_name = "max_trans_vel";
                    paramset.type = "float";
                    paramset.value = "0.7";
                    act.action_params.Add(paramset);

                    paramset = new ParameterSet();
                    paramset.param_name = "xy_goal_tolerance";
                    paramset.type = "float";
                    paramset.value = "0.15";
                    act.action_params.Add(paramset);

                    paramset = new ParameterSet();
                    paramset.param_name = "yaw_goal_tolerance";
                    paramset.type = "float";
                    paramset.value = "0.05";
                    act.action_params.Add(paramset);

                    paramset = new ParameterSet();
                    paramset.param_name = "p_drive";
                    paramset.type = "float";
                    paramset.value = "0.4";
                    act.action_params.Add(paramset);

                    paramset = new ParameterSet();
                    paramset.param_name = "d_drive";
                    paramset.type = "float";
                    paramset.value = "1.2";
                    act.action_params.Add(paramset);

                    paramset = new ParameterSet();
                    paramset.param_name = "wp_tolerance";
                    paramset.type = "float";
                    paramset.value = "1";
                    act.action_params.Add(paramset);

                    paramset = new ParameterSet();
                    paramset.param_name = "avoid";
                    paramset.type = "bool";
                    paramset.value = "false";
                    act.action_params.Add(paramset);

                    db_missiondata.work.Add(act);

                    string strMissionData_Json = JsonConvert.SerializeObject(db_missiondata);

                    //미션리스트 DB저장
                    mainform.dbBridge.onDBInsert_Missionlist(missionname, missionid, missionlevel, triggerflag, strMissionData_Json);

                    //화면 갱신
                    onInitSet();
                    gridView1.MoveLast();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("btnMissionInsert_Click err=" + ex.Message.ToString());
            }
        }

        private void onInitSet()
        {
            onMissionListRead();
            sqlDataSource1.Fill();
            actionList.Items.Clear();

        }

        private void missionDelete_Click(object sender, EventArgs e)
        {
            try
            {
                if (strSelectedMissionID != "")
                {
                    string strMsg = string.Format("미션ID: {0}  삭제하시겠습까?", strSelectedMissionID);

                    if (DialogResult.OK == MessageBox.Show(strMsg, "확인", MessageBoxButtons.OKCancel))
                    {
                        //미션리스트DB 삭제
                        mainform.dbBridge.onDBDelete_Missionlist(strSelectedMissionID);

                        //화면 재갱신
                        onInitSet();
                        gridView1.MoveLast();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("btnMissionDelete_Click err=" + ex.Message.ToString());
            }
        }

        private void actionAdd_Click(object sender, EventArgs e)
        {
            try
            {
                if (strSelectedMissionID != "")
                {
                    actioninsertDlg actiondlg = new actioninsertDlg();
                    if (actiondlg.ShowDialog() == DialogResult.OK)
                    {
                        Action act = new Action();

                        string stractiontype = actiondlg.strActiontype;
                        //string stractdata = "";
                        if (stractiontype.Equals("Goal-Point"))
                        {
                            act.action_type = (int)Data.ACTION_TYPE.Goal_Point;

                            act.action_args.Add(0);
                            act.action_args.Add(0);
                            act.action_args.Add(0);
                            ParameterSet paramset = new ParameterSet();
                            paramset.param_name = "max_trans_vel";
                            paramset.type = "float";
                            paramset.value = "0.7";
                            act.action_params.Add(paramset);

                            paramset = new ParameterSet();
                            paramset.param_name = "xy_goal_tolerance";
                            paramset.type = "float";
                            paramset.value = "0.15";
                            act.action_params.Add(paramset);

                            paramset = new ParameterSet();
                            paramset.param_name = "yaw_goal_tolerance";
                            paramset.type = "float";
                            paramset.value = "0.05";
                            act.action_params.Add(paramset);

                            paramset = new ParameterSet();
                            paramset.param_name = "p_drive";
                            paramset.type = "float";
                            paramset.value = "0.4";
                            act.action_params.Add(paramset);

                            paramset = new ParameterSet();
                            paramset.param_name = "d_drive";
                            paramset.type = "float";
                            paramset.value = "1.2";
                            act.action_params.Add(paramset);

                            paramset = new ParameterSet();
                            paramset.param_name = "wp_tolerance";
                            paramset.type = "float";
                            paramset.value = "1";
                            act.action_params.Add(paramset);

                            paramset = new ParameterSet();
                            paramset.param_name = "avoid";
                            paramset.type = "bool";
                            paramset.value = "false";
                            act.action_params.Add(paramset);
                        }
                        if (stractiontype.Equals("Docking"))
                        {
                            act.action_type = (int)Data.ACTION_TYPE.Docking;
                            act.action_args.Add(-1); // 전면, 후면 도킹
                            act.action_args.Add((float)0.03); // 도킹 지점까지의 전방 거리

                            ParameterSet param = new ParameterSet();
                            param.param_name = "center_offset";
                            param.type = "float";
                            param.value = "0.32";
                            act.action_params.Add(param);

                            param = new ParameterSet();
                            param.param_name = "mark_size"; // 마커 사이즈
                            param.type = "float";
                            param.value = "0.64";
                            act.action_params.Add(param);

                            param = new ParameterSet();
                            param.param_name = "scan_view"; // 도킹시 바라보는 방향
                            param.type = "int";
                            param.value = "3"; // 0 : 전방, 1: 좌측, 2: 후방, 3: 우측
                            act.action_params.Add(param);
                        }

                        int missioncnt = Data.Instance.missionlisttable.missioninfo.Count;

                        if (missioncnt > 0)
                        {
                            for (int i = 0; i < missioncnt; i++)
                            {
                                if (Data.Instance.missionlisttable.missioninfo[i].strMisssionID == strSelectedMissionID)
                                {
                                    string strworks = Data.Instance.missionlisttable.missioninfo[i].work;

                                    WorkFlowGoal db_missiondata = new WorkFlowGoal();

                                    db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strworks);

                                    db_missiondata.work.Add(act);

                                    Data.Instance.missionlisttable.missioninfo[i].work = JsonConvert.SerializeObject(db_missiondata);

                                    //미션파일 저장
                                    onMissionFile_Save(strSelectedMissionID);
                                    //화면 갱신
                                    onInitSet();
                                    actionView();
                                    gridView1.FocusedRowHandle = gridviewFocus;
                                    gridView1.SelectRow(gridviewFocus);
                                    pb_map_Paint();
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show("액션을 추가할 미션을 선택하세요.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("btnActionInsert_Click err=" + ex.Message.ToString());
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            string robotID = selectRobot.Text;
            if (robotID.Length > 3)
            {

                float robotx = 0, roboty = 0, robottheta = 0;
                if (Data.Instance.isConnected)
                {

                    for (int i = 0; i < Data.Instance.robot_liveinfo.robotinfo.msg.robolist.Count; i++)
                    {
                        if (Data.Instance.robot_liveinfo.robotinfo.msg.robolist.Count > 0)
                        {
                            if (Data.Instance.robot_liveinfo.robotinfo.msg.robolist[i].RID.Contains(robotID))
                            {
                                robotx = (float)Data.Instance.robot_liveinfo.robotinfo.msg.robolist[i].pose.x;
                                roboty = (float)Data.Instance.robot_liveinfo.robotinfo.msg.robolist[i].pose.y;
                                robottheta = (float)Data.Instance.robot_liveinfo.robotinfo.msg.robolist[i].pose.theta;
                                break;
                            }
                        }
                    }
                }

                Invoke(new MethodInvoker(delegate ()
                {
                    readX.Text = robotx.ToString("N2");
                    xposTextbox.Text = robotx.ToString("N5");
                    readY.Text = roboty.ToString("N2");
                    yposTextbox.Text = roboty.ToString("N5");
                    readTheta.Text = robottheta.ToString("N2");
                    thetaTextbox.Text = robottheta.ToString("N5");
                }));


                if (pb_map.Image != null)
                {

                }
            }
        }

        private void bindingCombobox()
        {
            if (Data.Instance.Robot_RegInfo_list.Count > 0)
            {
                foreach (KeyValuePair<string, Robot_RegInfo> info in Data.Instance.Robot_RegInfo_list)
                {
                    string robotid = info.Value.robot_id;
                    selectRobot.Items.Add(robotid);
                }

            }
        }

        private void actionDelete_Click(object sender, EventArgs e)
        {
            try
            {
                if (strSelectedMissionID != "")
                {
                    string strMsg = string.Format("액션 : {0}  삭제하시겠습까?", nSelectedActionidx);

                    if (DialogResult.OK == MessageBox.Show(strMsg, "확인", MessageBoxButtons.OKCancel))
                    {
                        int missioncnt = Data.Instance.missionlisttable.missioninfo.Count;

                        if (missioncnt > 0)
                        {
                            for (int i = 0; i < missioncnt; i++)
                            {
                                if (Data.Instance.missionlisttable.missioninfo[i].strMisssionID == strSelectedMissionID)
                                {
                                    string strworks = Data.Instance.missionlisttable.missioninfo[i].work;
                                    WorkFlowGoal db_missiondata = new WorkFlowGoal();
                                    db_missiondata = JsonConvert.DeserializeObject<WorkFlowGoal>(strworks);

                                    db_missiondata.work.RemoveAt(nSelectedActionidx);

                                    Data.Instance.missionlisttable.missioninfo[i].work = JsonConvert.SerializeObject(db_missiondata);
                                    //미션파일 저장
                                    onMissionFile_Save(strSelectedMissionID);
                                    //화면 갱신
                                    onInitSet();
                                    gridView1.FocusedRowHandle = gridviewFocus;
                                    gridView1.SelectRow(gridviewFocus);
                                    actionView();
                                    pb_map_Paint();
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show("액션을 삭제할 미션을 선택하세요.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("btnActionDelete_Click err=" + ex.Message.ToString());
            }
        }

        private void selectRobot_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void label10_Click(object sender, EventArgs e)
        {

        }

        private void label9_Click(object sender, EventArgs e)
        {

        }

        private void label8_Click(object sender, EventArgs e)
        {

        }

        private void readTheta_TextChanged(object sender, EventArgs e)
        {

        }

        private void readY_TextChanged(object sender, EventArgs e)
        {

        }

        private void readX_TextChanged(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {

        }

        private void downBtn_Click(object sender, EventArgs e)
        {

        }
    }
}
