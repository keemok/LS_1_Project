using MySql.Data.MySqlClient;
using Newtonsoft.Json;
using Rosbridge.Client;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Linq;
using System.Net.NetworkInformation;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Syscon_Solution.Exhibition
{
    public partial class exhibitionMain : Form
    {

        string strStartMissionid = "";
        int ncurrTaskRobotid_idx = 0;
        int ncurrWaitRobotid_idx = 0;
        string strCurrStartRobot = "";
        List<string> CrashCheckRobot_list = new List<string>();
        Thread crashchk_thread;
        List<string> crashrobot_run_list = new List<string>();
        List<string> crashrobot_pause_list = new List<string>();
        List<string> CrashCheckRobot_Linedrive_list = new List<string>();
        Thread crashchk_Linedrive_thread;
        List<string> crashrobot_Linedrive_run_list = new List<string>();
        List<string> crashrobot_Linedrive_pause_list = new List<string>();
        List<string> CrashCheckRobot_Sdrive_list = new List<string>();
        Thread crashchk_Sdrive_thread;
        List<string> crashrobot_Sdrive_run_list = new List<string>();
        List<string> crashrobot_Sdrive_pause_list = new List<string>();

        bool bS2waitMove = false;
        string bSMove_pause_robotid = "";
        string bSMove_run_robotid = "";

        bool bTmpMove = false;
        string bTmpMove_pause_robotid = "";
        string bTmpMove_run_robotid = "";

        bool bMaploading = false;

        bool bstarttrack_timerflag = false;

        string[] currTaskRobotid = new string[100];
        Dictionary<string, Robot_Demo_Info> robot_demoinfo = new Dictionary<string, Robot_Demo_Info>();

        Dictionary<string, string> strWaitPosMove_Robot = new Dictionary<string, string>();

        int nwaitpos_To_demorun_Currentrobotidx = 0;

        Dictionary<string, string> strWaitPosMove_Robot_one = new Dictionary<string, string>();

        public FleetManager.DB.DB_bridge dbBridge = new FleetManager.DB.DB_bridge();
        public FleetManager.Comm.Comm_bridge commBridge;

        bool bLinedrive1_waitok = false;
        bool bLinedrive2_waitok = false;
        int nlinedriveCnt = 0;
        bool bcostmaploading = false;

        int nbasicmoveCnt = 0;
        int nliftCnt = 0;
        int nCurveCnt = 0;

        int actionIDX;

        string taskid, taskname, missionlist, robotlist;
        List<string> StartRobot_Skip = new List<string>();

        string strAddr = "ws://192.168.20.28:9090";

        bool RED = false;
        bool GREEN = false;

        int robot5idx = 2; // 1
        int robot1idx = 1;
        int robot4idx = 2;
        float ori_x = -10;
        float ori_y = (float)-10;
        byte[] sourceMapValues;
        int nSourceMapWidth = 0;
        int nSourceMapHeight = 0;

        float resoultion1;
        float ratio = 1;

        string right_circle = "MID20190930170555"; // 우측원 반복
        string ur_mission = "MID20190930170453"; // Red button Click
        string basic_mission = "MID20190919165405"; // 8자 주행
        string green_button = "MID20191002144305";
        string docking_input = "MID20190930170656";
        string docking_output = "MID20191006143551";
        string goWait_robot5 = "MID20190930170524";//전시회 대기장소 1
        string goWait_robot4 = "MID20190930170546"; //전시회 대기장소 2
        string robot1_front = "MID20190930170618"; // 로봇 1 전진
        string robot1_rear = "MID20190930170649";

        float dOrignX = 0;
        float dOrignY = 0;
        bool bGlobalcostmaploading = false;

        float translate_x = 0;
        float translate_y = 0;

        string m_strRobotName = "";

        string[] xisIPaddress = { "192.168.0.181", "192.168.0.182", "192.168.0.183" };

        bool dockingFinish = false;
        bool convFinish = false;

        bool bRobot4_wait = false;
        bool bRobot5_wait = false;

        monitoringForm monitoringform;

        public exhibitionMain()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            gridView1.OptionsBehavior.Editable = false;
            commBridge = new FleetManager.Comm.Comm_bridge(this);
            
            XISconn();
            dbBridge.onDBConnectionPath_OpenCheck();
            //commBridge.mapinfo_Evt += new FleetManager.Comm.Comm_bridge.MapInfoComplete(this.MapInfoComplete);
            





            if (dbBridge.onRIDiS_InitSql() == 0)
            { }
            else
            {
                //연결 실패
                Data.Instance.isDBConnected = false;
                MessageBox.Show("RIDiS 데이타베이스 연결 에러, 점검후 사용하세요.");
                return;
            }

            //solution DB 연결
            /* if (dbBridge.onInitSql() == 0)
             { }
             else
             {
                 //연결 실패
                 Data.Instance.isDBConnected = false;
                 MessageBox.Show("Solution 데이타베이스 연결 에러, 점검후 사용하세요.");
                 return;
             }
             */
            onRobotListCheck();
            commBridge.taskfeedback_Evt += new FleetManager.Comm.Comm_bridge.TaskFeedbackResponse(this.TaskFeedbackResponse);
            commBridge.MoveBase_Status_Evt += new FleetManager.Comm.Comm_bridge.MoveBase_StatusComplete(this.MoveBase_StatusComplete);
            onInit();
        }
        private void onRobotListCheck()
        {
            dbBridge.onDBRead_Robotlist("all");
            //onDBRead_RobotStatus();
            onRobots_WorkInfo_InitSet();
        }

        Thread pingtest;
        private void onInit()
        {
            pingtest = new Thread(pingTest);
            pingtest.IsBackground = true;
            pingtest.Start();
        }
        public void MoveBase_StatusComplete(string strrobotid)
        {
            try
            {
                // if (Data.Instance.nFormidx == (int)Data.FORM_IDX.Operaion_TaskForm)
                // {
                this.MoveBase_Complete(strrobotid);
                //  }
            }
            catch (Exception ex)
            {
                Console.WriteLine("MoveBase_StatusComplete err=" + ex.Message.ToString());
            }
        }
        public void MoveBase_Complete(string strrobotid)
        {
            try
            {
                if (bTmpMove && strrobotid == bTmpMove_pause_robotid)  //tempomove 이동이 완료되었을때... 
                {
                    int nlistcnt = Data.Instance.Robot_work_info[strrobotid].robot_status_info.goalrunnigstatus.msg.status_list.Count;
                    if (Data.Instance.Robot_work_info[strrobotid].robot_status_info.goalrunnigstatus.msg.status_list[nlistcnt - 1].status == 3)
                    {
                        onTaskResum(bTmpMove_run_robotid);
                        bTmpMove_run_robotid = "";
                        bTmpMove_pause_robotid = "";
                        bTmpMove = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("MoveBase_StatusComplete err=" + ex.Message.ToString());
            }

        }
        public void TaskFeedbackResponse(string strrobotid)
        {
            try
            {

                Invoke(new MethodInvoker(delegate ()
                {

                }));

                if (Data.Instance.Robot_work_info[strrobotid].mission_complete)
                {
                    if (Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.task_complete) return;

                    Data.Instance.Robot_work_info[strrobotid].mission_complete = false;

                    this.TaskFeedback_Complete(strrobotid);
                }
                else
                {
                    this.TaskFeedback_Ing(strrobotid);
                    
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("TaskFeedbackResponse err=" + ex.Message.ToString());
            }
        }

        bool bconv_run = false;
        bool temp;
        bool action = true;
        private void TaskFeedback_Ing(string strrobotid)
        {
            
            int missionid = Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.mission_indx;
            int actidx = Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.action_indx;

           

            if (strrobotid == "R_005")
            {
                if (exhibition_missionlist[missionid] == docking_input)
                {
                    if (actidx == 6 && !bconv_run)
                    {
                        convOutput();
                        bconv_run = true;
                        temp = true;
                        Console.WriteLine("컨베이어 로봇1 > 로봇5");
                        action = true;
                    }
                    if (actidx == 8 && action)
                    {
                        bconv_run = false;
                        dockingFinish = true;

                        //convFinish = true;
                        //// 10월 10일 추가

                        action = false;
                        if (toggleSwitch3.IsOn)
                        {
                            commBridge.onMissionChange_publish("R_005", right_circle);
                            strCurr5_MissionID = right_circle;
                            Thread.Sleep(50);
                            onTaskResum("R_005");
                            return;
                        }
                        Console.WriteLine("Robot 5 action index is 8 -> mission change robot4 green button");
                        commBridge.onMissionChange_publish("R_004", green_button);
                        strCurr4_MissionID = green_button;
                        Thread.Sleep(50);
                        onTaskResum("R_004");
                        return;
                    }
                    //if (actidx == 9 && bconv_run && temp)
                    //{
                    //    dockingFinish = true; // add
                    //    temp = false;
                    //    onTaskPause("R_005");
                    //    bconv_run = false;
                    //    Console.WriteLine("docking input : 액션 index 8 -> robot 5 pause");

                    //}
                }
                else if (exhibition_missionlist[missionid] == docking_output)
                {
                    if (actidx == 6 && !bconv_run)
                    {
                        convInput();
                        bconv_run = true;
                        temp = true;
                        Console.WriteLine("컨베이어 로봇5 > 로봇1");
                        action = true;
                    }
                    if(actidx == 8 && action)
                    {
                        bconv_run = false;
                        dockingFinish = true;

                        //convFinish = true;
                        //// 10월 10일 추가
                        action = false;
                        if (toggleSwitch3.IsOn)
                        {
                            commBridge.onMissionChange_publish("R_005", right_circle);
                            strCurr5_MissionID = right_circle;
                            Thread.Sleep(50);
                            onTaskResum("R_005");
                            return;
                        }
                        Console.WriteLine("Robot 5 action index is 8 -> mission change robot4 green button");
                        commBridge.onMissionChange_publish("R_004", green_button);
                        Thread.Sleep(50);
                        onTaskResum("R_004");
                    }
                    //if (actidx == 9 && bconv_run && temp)
                    //{
                    //    dockingFinish = true; // add
                    //    temp = false;
                    //    bconv_run = false;
                    //    onTaskPause("R_005");
                    //    Console.WriteLine("docking output : 액션 index 8 -> robot 5 pause");

                    //}
                }

                if (exhibition_missionlist[missionid] == basic_mission)
                {
                    if(actidx == 10 && bRobot4_run == false)
                    {
                        onTaskResum("R_004");
                        Console.WriteLine("i call the resume");
                        bRobot4_run = true;
                        return;
                    }
                    
                }

        }

            //Console.WriteLine("미션 진행중"+strrobotid);
        }
        string[] exhibition_missionlist = { "MID20190919165405", "MID20190930170453", "MID20190930170524", "MID20190930170546",
            "MID20190930170555", "MID20190930170618", "MID20190930170649", "MID20190930170656", "MID20191001145359","MID20191002144305"
                ,"MID20191006143551" };

        string strCurr5_MissionID = "";
        string strCurr4_MissionID = "";
        string strCurr1_MissionID = "";
        string str5_mode = "basicmode";
        string str4_mode = "basicmode";
        bool bRobot4_run = false;

        private void manualmode(string strrobotid)
        {
            int missionid = Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.mission_indx;
            int actionidx = Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.action_indx;
            string strrobotmissionid = Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.work_id;
            Console.WriteLine("Mission index : {0},  Robot id : {1}", Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.mission_indx, strrobotid);

            if (strrobotid == "R_005")
            {
                Console.WriteLine("주행 미션은 -> {0}", exhibition_missionlist[missionid]);

                //if (robot5idx != 2 && exhibition_missionlist[missionid] == basic_mission)
                //{
                //    robot5idx++;
                //    return;
                //}


                //if (robot5idx == 2 && exhibition_missionlist[missionid] == basic_mission)
                //{
                //    robot5idx = 2;
                //    commBridge.onMissionChange_publish(strrobotid, right_circle);
                //    strCurr5_MissionID = right_circle;
                //    onTaskResum(strrobotid);
                //    //textbox1.appendText("로봇5 8자 주행 끝. 미션 체인지 \r\n");
                //    return;
                //}
                if (exhibition_missionlist[missionid] == goWait_robot5)
                {
                    commBridge.onMissionChange_publish(strrobotid, basic_mission);
                    strCurr5_MissionID = basic_mission;
                    onTaskResum(strrobotid);
                    return;
                }

                
                Console.WriteLine("Robot 4 index : {0}", robot5idx);


                if (RED && exhibition_missionlist[missionid] == right_circle)
                {
                    if (toggleSwitch1.IsOn == false)
                    {
                        commBridge.onMissionChange_publish(strrobotid, docking_input);
                        strCurr5_MissionID = docking_input;
                        onTaskResum(strrobotid);
                        RED = false;

                        Invoke(new MethodInvoker(delegate ()
                        {
                            toggleSwitch1.IsOn = true;
                        }));
                        //bRobot4_run = false;
                        Console.WriteLine("ROBOT5 컨베이어 INPUT 동작");
                        return;
                    }
                    else if (toggleSwitch1.IsOn == true)
                    {
                        commBridge.onMissionChange_publish(strrobotid, docking_output);
                        strCurr5_MissionID = docking_output;
                        onTaskResum(strrobotid);
                        RED = false;
                        Invoke(new MethodInvoker(delegate ()
                        {
                            toggleSwitch1.IsOn = false;
                        }));
                        //bRobot4_run = false;
                        Console.WriteLine("ROBOT5 컨베이어 OUTPUT 동작");
                        return;
                    }
                }

                if (exhibition_missionlist[missionid] == docking_input)
                {
                    //commBridge.onMissionChange_publish(strrobotid, goWait_robot5);
                    //dockingFinish = true;
                    Console.WriteLine("도킹 Complete");
                    Thread.Sleep(1000);
                    commBridge.onMissionChange_publish(strrobotid, right_circle);
                    onTaskResum(strrobotid);
                    return;
                }
                if (exhibition_missionlist[missionid] == docking_output)
                {
                    //commBridge.onMissionChange_publish(strrobotid, goWait_robot5);
                    //dockingFinish = true;
                    Console.WriteLine("도킹 Complete");
                    Thread.Sleep(1000);
                    commBridge.onMissionChange_publish(strrobotid, right_circle);
                    onTaskResum(strrobotid);
                    return;
                }



            }
        }
        public async void TaskFeedback_Complete(string strrobotid)
        {
            try
            {
                int missionid = Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.mission_indx;
                int actionidx = Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.action_indx;
                string strrobotmissionid = Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.work_id;
                Console.WriteLine("Mission index : {0},  Robot id : {1}", Data.Instance.Robot_work_info[strrobotid].robot_status_info.taskfeedback.msg.feedback.mission_indx,strrobotid);

                if (toggleSwitch3.IsOn)
                {
                    manualmode(strrobotid);
                    return;
                }
                if (strCurr5_MissionID != strrobotmissionid && strrobotid =="R_005" )
                {
                    Console.WriteLine("mission id  오류 robotmission ={0}... sendmission={1}",strrobotmissionid, strCurr5_MissionID);
                    commBridge.onMissionChange_publish(strrobotid, strCurr5_MissionID);
                    
                    onTaskResum(strrobotid);
                    return;
                }

                if (strCurr4_MissionID != strrobotmissionid && strrobotid == "R_004")
                {
                    Console.WriteLine("mission id  오류 robotmission ={0}... sendmission={1}", strrobotmissionid, strCurr4_MissionID);
                    
                    return;
                }



                if(strrobotid == "R_001")
                {
                    if(exhibition_missionlist[missionid] == robot1_front)
                    {
                        onTaskPause(strrobotid);
                    }
                    if(exhibition_missionlist[missionid] == robot1_rear)
                    {
                        onTaskPause(strrobotid);
                    }
                }
                if (strrobotid == "R_005")
                {
                    Console.WriteLine("주행 미션은 -> {0}", exhibition_missionlist[missionid]);
                    
                    Console.WriteLine("Robot 5 index : {0}", robot5idx);

                    if (robot5idx != 2 && exhibition_missionlist[missionid] == basic_mission)
                    {
                        robot5idx++;
                       // return;
                    }
                    else if (robot5idx == 2 && exhibition_missionlist[missionid] == basic_mission)
                    {
                        robot5idx = 2;
                        commBridge.onMissionChange_publish(strrobotid, right_circle);
                        strCurr5_MissionID = right_circle;
                        onTaskResum(strrobotid);
                        //textbox1.appendText("로봇 5번 8자주행 끝. 미션 체인지 \r\n");
                        //return;
                    }
                    else if (RED && exhibition_missionlist[missionid] == right_circle)
                    {
                        if (toggleSwitch1.IsOn == false)
                        {
                            commBridge.onMissionChange_publish(strrobotid, docking_input);
                            strCurr5_MissionID = docking_input;
                            onTaskResum(strrobotid);
                            //RED = false;

                            Invoke(new MethodInvoker(delegate ()
                            {
                                toggleSwitch1.IsOn = true;
                            }));
                            //bRobot4_run = false;
                            Console.WriteLine("ROBOT5 컨베이어 INPUT 동작");
                            //textbox1.appendText("로봇 5 컨베이어 Input 동작 미션 체인지. \r\n");
                            //return;
                        }
                        else if (toggleSwitch1.IsOn == true)
                        {
                            commBridge.onMissionChange_publish(strrobotid, docking_output);
                            strCurr5_MissionID = docking_output;
                            onTaskResum(strrobotid);
                            //RED = false;
                            Invoke(new MethodInvoker(delegate ()
                            {
                                toggleSwitch1.IsOn = false;
                            }));
                            //bRobot4_run = false;
                            Console.WriteLine("ROBOT5 컨베이어 OUTPUT 동작");
                            //textbox1.appendText("로봇 5 컨베이어 Output 동작 미션 체인지. \r\n");
                            //return;
                        }
                    }

                    else if (RED && exhibition_missionlist[missionid] == docking_input)
                    {
                        //commBridge.onMissionChange_publish(strrobotid, goWait_robot5);

                        
                        temp = true;
                        bconv_run = false;
                        dockingFinish = true;
                        Console.WriteLine("도킹 input Complete");
                        //textbox1.appendText("로봇 1 -> 5 Input 완료 \r\n");
                        Thread.Sleep(1000);
                        onTaskPause(strrobotid);
                        //return;
                    }
                    else if(RED && exhibition_missionlist[missionid] == docking_output)
                    {
                        //commBridge.onMissionChange_publish(strrobotid, goWait_robot5);
                        bconv_run = false;
                        temp = true;
                        dockingFinish = true;
                        Console.WriteLine("도킹 output Complete");
                        //textbox1.appendText("로봇 1 -> 5 Output 완료 \r\n");
                        Thread.Sleep(1000);
                        onTaskPause(strrobotid);
                        //return;
                    }

                    else if(exhibition_missionlist[missionid] == goWait_robot5)
                    {
                        onTaskPause(strrobotid);
                        bRobot5_wait = true;
                        bRobot4_wait = true;
                        Console.WriteLine("로봇 5 미션 모두 완료 brobot4_wait 값 : {0}", goWait_robot5);
                        //textbox1.appendText("로봇 5 미션 모두 완료, 대기장소. \r\n");
                        //commBridge.onMissionChange_publish(strrobotid, basic_mission);
                        //strCurr5_MissionID = basic_mission;
                        //onTaskResum(strrobotid);
                        //return;
                    }

                    




                }

                if(strrobotid=="R_004")
                {
                    Console.WriteLine("주행 미션은 -> {0}", exhibition_missionlist[missionid]);
                    
                    Console.WriteLine("Robot 4 index : {0}", robot4idx);

                    if (robot4idx != 2 && exhibition_missionlist[missionid] == basic_mission)
                    {
                        robot4idx++;
                        //commBridge.onMissionChange_publish(strrobotid, basic_mission);
                        //strCurr4_MissionID = basic_mission;
                        //onTaskResum(strrobotid);
                        //Console.WriteLine("Robot 4 index : {0}", robot4idx);
                    //    return;
                    }
                    else if (robot4idx == 2 && exhibition_missionlist[missionid]==basic_mission)
                    {
                        robot4idx = 2;
                        commBridge.onMissionChange_publish(strrobotid, ur_mission);
                        strCurr4_MissionID = ur_mission;
                        onTaskResum(strrobotid);
                        //textbox1.appendText("로봇4 8자 주행 끝. UR 미션 체인지. \r\n");

                        //   return;
                    }

                    else if(exhibition_missionlist[missionid] == ur_mission)
                    {
                        Console.WriteLine("UR미션 완료"); //RED BUTTON MISSION
                        //textbox1.appendText("UR 미션 완료. (PUSH RED BUTTON) \r\n");
                        //commBridge.onMissionChange_publish(strrobotid, green_button);
                        strCurr4_MissionID = green_button;
                        onTaskPause("R_004");
                        Thread.Sleep(100);
                        //commBridge.onMissionChange_publish("R_001", robot1_front);

                        //onTaskResum("R_001");

                        //Console.WriteLine("로봇 1 전진 -----");
                        
                        onTaskPause("R_004");
                     //   return;
                    }

                    else if(exhibition_missionlist[missionid] == green_button)
                    {
                        

                        Console.WriteLine("push the green button -> go to wait pos(R_5,R_4)");
                        //commBridge.onMissionChange_publish("R_004", goWait_robot4);
                        commBridge.onMissionChange_publish("R_005", goWait_robot5);
                        //strCurr4_MissionID = goWait_robot4;
                        strCurr5_MissionID = goWait_robot5;

                        //onTaskResum("R_005");
                        onTaskPause("R_004");
                        Console.WriteLine("Problem -> Robot 4 ------------>");
                        //textbox1.appendText("로봇4, 로봇5 대기장소 이동 미션. \r\n");
                        //return;

                    }

                    else if(exhibition_missionlist[missionid] == goWait_robot4)
                    {
                        onTaskPause(strrobotid);
                        
                        
                        Console.WriteLine("로봇 4 미션 모두 완료 brobot4_wait 값 : {0}", goWait_robot4);
                       // return;
                    }
      
                    
                }


                Data.Instance.bCrashcheckPause = false;
            }
            catch (Exception ex)
            {
                Console.WriteLine("TaskFeedback_Complete err=" + ex.Message.ToString());
            }

        }
        MapState mapstate = new MapState();
        private void selectMap()
        {
            
            DataSet ds = new DataSet();
            string sql = "select * from map_t where map_id ='yrrt_mapid_201910211432'";
            MySqlDataAdapter adapter = new MySqlDataAdapter(sql, conn);
            string temp = "";
            adapter.Fill(ds, "map_t");
            if (ds.Tables.Count > 0)
            {
                foreach (DataRow r in ds.Tables[0].Rows)
                {
                    //Console.WriteLine(r["map_data"]);
                    mapstate = JsonConvert.DeserializeObject<MapState>(r["map_data"].ToString());
                    //Console.WriteLine(mapstate.data);
                }
            }

            //int[] bytes = mapstate.data.ToArray().Select(x => (int)x).ToArray();


            Console.WriteLine(mapstate.data.Count());

            sourceMapValues = mapstate.data.ToArray().Select(x => (byte)x).ToArray();
            for (var y = 0; y < width * height; y++)
            {
                sourceMapValues[y] = (byte)mapstate.data[y];

            }
            MapInfoComplete();

        }
        public void onRobots_WorkInfo_InitSet()
        {
            try
            {
                Data.Instance.Robot_work_info.Clear();
                //foreach (KeyValuePair<string, string> info in Data.Instance.Robot_status_info)
                int cnt = 0;
                cnt = Data.Instance.Robot_RegInfo_list.Count;
                if (cnt > 0)
                {
                    foreach (KeyValuePair<string, Robot_RegInfo> info in Data.Instance.Robot_RegInfo_list)
                    {
                        string strrobotid = info.Key;
                        Robot_RegInfo value = info.Value;

                        Data.Instance.Robot_work_info.Add(strrobotid, commBridge.onNewRobotWorkInfo_initial(strrobotid, "", 1, 0, "", ""));
                    }
                }
            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("onRobots_WorkInfo_InitSet err :={0}", ex.Message.ToString());
            }
        }
        public void onCompulsion_Close() //강제종료시 처리할 부분들
        {
            if (Data.Instance.isConnected)
            {
                try
                {
                    //worker.onDeleteAllSubscribe_Compulsion();
                    Thread.Sleep(1000);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("onCompulsion_Close err" + ex.Message.ToString());
                }
            }
        }


        Dictionary<string, SubconSocket> SubconSocket_Info = new Dictionary<string, SubconSocket>();
        int SubconPORT = 5000;
        private void XISconn()
        {
            string strID = "";
            for(int i=0;i<xisIPaddress.Count();i++)
            {
                strID = "192.168.0." + (181 + i).ToString();  //181 : button + led , 182: led , 183: convey
                SubconSocket socket = new SubconSocket(strID, SubconPORT);
                socket.onSocketInit();
                socket.subconRecvEvent += new SubconSocket.SubconResponse(this.ResponseEvent);
                socket.subconBtnRecvEvent += new SubconSocket.SubconBtnResponse(this.ResponseBtnEvent);

                if (SubconSocket_Info.ContainsKey(strID))
                {
                    SubconSocket_Info[strID].DisConnect();
                    SubconSocket_Info.Remove(strID);
                }
                SubconSocket_Info.Add(strID, socket);
            }
        }

        private void ResponseBtnEvent(string strID, string data)
        {
            try
            {
                //onListmsg(strID, data);
            }
            catch(Exception e)
            {
                Console.WriteLine("EventBtnResponse err : " + e.Message.ToString());
            }
        }
        public void ResponseBtnEvent(string strID, byte[] data, byte[] info)
        {
            //Console.WriteLine("ResponseBtnEvent info : ["+ string.Format("0x{0:x2}..", info[0]) + string.Format("0x{0:x2}..", info[1]));
            try
            {
                if (info[0] == 0x01) // 컨베이어
                {
                    if (info[1] == 0x01) // 미션 중
                    {
                        Console.WriteLine("0x01 -> Working");
                    }
                    else if (info[1] == 0x02) // 미션 완료
                    {
                        Console.WriteLine("0x02 -> Task finish");
                    }
                    else if (info[1] == 0x03) // 센서 또는 롤러 에러
                    {
                        Console.WriteLine("0x03 -> Error : Sensor or roler");
                    }
                    else if (info[1] == 0x04) // 명령 에러
                    {
                        Console.WriteLine("0x04 -> Order error");
                    }
                }
                else if (info[0] == 0x02) // 버튼
                {




                    if (info[1] == 0x01) // led red
                    {
                        byte[] senddata = new byte[100];
                        int send_length = 0;
                        senddata[send_length] = data[0]; send_length++; //STX
                        senddata[send_length] = data[1]; send_length++; //CMD1
                        senddata[send_length] = 0x10; send_length++; //CMD2
                        senddata[send_length] = 0x01; send_length++; //CMD3
                        senddata[send_length] = data[4]; send_length++; //DATA1
                        senddata[send_length] = data[5]; send_length++; //DATA2
                        senddata[send_length] = data[6]; send_length++; //DATA3
                        senddata[send_length] = 0x02; send_length++; //DATA4                                
                        senddata[send_length] = data[8]; send_length++; //CRC
                        senddata[send_length] = data[9]; send_length++; //ETX
                        senddata[8] = ChkSum(senddata);

                        SubconSocket_Info[xisIPaddress[0]].BeginByteSend(senddata, send_length);
                        SubconSocket_Info[xisIPaddress[1]].BeginByteSend(senddata, send_length);

                    }
                    else if (info[1] == 0x02) // led green
                    {
                        byte[] senddata = new byte[100];
                        int send_length = 0;
                        senddata[send_length] = data[0]; send_length++; //STX
                        senddata[send_length] = data[1]; send_length++; //CMD1
                        senddata[send_length] = 0x10; send_length++; //CMD2
                        senddata[send_length] = 0x01; send_length++; //CMD3
                        senddata[send_length] = data[4]; send_length++; //DATA1
                        senddata[send_length] = data[5]; send_length++; //DATA2
                        senddata[send_length] = data[6]; send_length++; //DATA3
                        senddata[send_length] = 0x03; send_length++; //DATA4                                
                        senddata[send_length] = data[8]; send_length++; //CRC
                        senddata[send_length] = data[9]; send_length++; //ETX
                        senddata[8] = ChkSum(senddata);


                        SubconSocket_Info[xisIPaddress[0]].BeginByteSend(senddata, send_length);
                        SubconSocket_Info[xisIPaddress[1]].BeginByteSend(senddata, send_length);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("ResponseBtnEvent err :" + e.Message.ToString());
            }
        }
        private byte ChkSum(byte[] buff)
        {

            byte cal_crc = 0x00;
            for (int i = 1; i < 8; i++)
                cal_crc = (byte)(cal_crc ^ buff[i]);

            return cal_crc;
        }
        private void ResponseEvent(string strID, string data)
        {
            try
            {
                if (data == "REDON")
                {
                    RED = true;
                    GREEN = false;
                }
                if (data == "GREENON")
                {
                    GREEN = true;
                    RED = false;
                }
                if (data == "CONVFINISH")
                {
                    convFinish = true;
                    Console.WriteLine("컨베이어 미션 완료 "+ convFinish);
                }
                //onListmsg(strID, data);
                //Console.WriteLine(strID);
            }
            catch(Exception e)
            {
                Console.WriteLine("EventResponse err : " + e.Message.ToString());
            }
        }

        private void onListmsg(string strID, string data)
        {
            Console.WriteLine("{0} : {1}", strID, data);
        }


        private async void ROSConnection(string strAddr)
        {
            if (Data.Instance.isConnected)
            {
                try
                {
                    onCompulsion_Close();

                    ROSDisconnect();
                }
                catch (Exception ex)
                {
                    textBox2.AppendText("접속 에러.\r\n");
                    Console.WriteLine("ROSConnection err =" + ex.Message.ToString());
                }
            }
            else
            {
                try
                {
                    //ingdlg.onLblMsg("서버에 연결중입니다.");
                    //ingdlg.Show();

                    string uri = strAddr;
                    Data.Instance.socket = new Rosbridge.Client.Socket(new Uri(uri));

                    Data.Instance.md = new MessageDispatcher(Data.Instance.socket, new MessageSerializerV2_0());
                    await Data.Instance.md.StartAsync();

                    if (Data.Instance.socket.Connected)
                    {
                    }
                    Data.Instance.isConnected = true;

                    if (ServerConnect_Checkthread != null)
                    {
                        ServerConnect_Checkthread.Abort();
                        ServerConnect_Checkthread = null;
                    }
                    ServerConnect_Checkthread = new Thread(onConnectCheck);
                    ServerConnect_Checkthread.IsBackground = true;
                    ServerConnect_Checkthread.Start();
                    if (Data.Instance.isConnected == true)
                    {
                        onSuscribe_RobotsStatus_Basic();
                    }
                    Console.WriteLine("connection successs");

                }
                catch (Exception ex)
                {
                    ROSDisconnect();
                    if (Data.Instance.isConnected == false)
                    {
                        //ingdlg.Hide();
                        MessageBox.Show("연결에 실패하였습니다.");
                    }
                    return;
                }
            }
        }
        private void onSuscribe_RobotsStatus_Basic()
        {
            try
            {


                if (Data.Instance.isConnected)
                {
                    //Dictionary<string, string> robotinfo = Data.Instance.Robot_status_info;
                    //foreach (KeyValuePair<string, string> info in robotinfo)
                    int cnt = 0;
                    cnt = Data.Instance.Robot_RegInfo_list.Count;
                    if (cnt > 0)
                    {
                        foreach (KeyValuePair<string, Robot_RegInfo> info in Data.Instance.Robot_RegInfo_list)
                        {
                            string strrobotid = info.Key;
                            Robot_RegInfo value = info.Value;

                            commBridge.onSelectRobotStatus_Basic_subscribes(strrobotid);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("onSuscribe_RobotsStatus_Basic err :={0}", ex.Message.ToString());
            }
        }
        private void onConnectCheck()
        {
            try
            {
                for (; ; )
                {
                    if (Data.Instance.bFormClose) break;

                    if (!Data.Instance.isConnected) break;

                    if (!Data.Instance.socket.Connected)
                    {

                        ROSDisconnect();
                        break;
                    }
                    Thread.Sleep(10);

                }
            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("onConnectCheck err :={0}", ex.Message.ToString());
            }
        }


        Thread ServerConnect_Checkthread;

        public void ROSDisconnect()
        {
            try
            {
                if (Data.Instance.md != null)
                {
                    Data.Instance.md.Dispose();
                    Data.Instance.md = null;
                }
                Data.Instance.isConnected = false;

                Invoke(new MethodInvoker(delegate ()
                {
                    //connButton.Text = "connect";
                    //connButton.Enabled = true;
                }));
                Data.Instance.socket = null;
            }
            catch (Exception ex)
            {
                Console.WriteLine("ROSDisconnect err = " + ex.Message.ToString());
            }
        }
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            monitoringform = new monitoringForm();
            monitoringform.onInit();
            monitoringform.Show();

        }
        public void onSelectRobotMap_monitor(string strrobotid)
        {
            if (Data.Instance.isConnected)
            {
                try
                {
                    commBridge.onSelectRobotMap_monitor_subscribe(strrobotid);
                    Thread.Sleep(Data.Instance.nSubscribeDelayTime);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("onSelectRobotMap_monitor err=" + ex.Message.ToString());
                }
            }
        }

        MySqlConnection conn;
        private void connDB(object sender, EventArgs e)
        {
            string strConn = "Server=192.168.20.28;Database=ridis_db;Uid=syscon;Pwd=r023866677!";
            conn = new MySqlConnection(strConn);
            conn.Open();
            textBox1.AppendText("Connect success");
            selectMap();

        }


        int width = 437;
        int height = 549;
        public void MapInfoComplete()
        {
            try
            {



                //width = Data.Instance.Robot_work_info[strrobotid].robot_status_info.mapinfo.msg.info.width;
                //height = Data.Instance.Robot_work_info[strrobotid].robot_status_info.mapinfo.msg.info.height;
                //resoultion1 = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.mapinfo.msg.info.resolution;
                //ori_x = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.mapinfo.msg.info.origin.position.x;
                //ori_y = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.mapinfo.msg.info.origin.position.y;

                resoultion1 = (float)0.02;
                ori_x = (float)-5.8;
                ori_y = (float)-8.5;




                nSourceMapWidth = width;
                nSourceMapHeight = height;

                Size sz = pb_map.Size;
                if (sz.Width > width)
                {
                    float tmpratio_w = (float)(sz.Width) / width;
                    float tmpratio_h = 0;
                    if (sz.Height > height)
                    {
                        tmpratio_h = (float)(sz.Height) / height;
                    }
                    if (tmpratio_w > tmpratio_h)
                        ratio = tmpratio_h;
                    else ratio = tmpratio_w;

                }

                //sourceMapValues = new byte[width * height];


                onMapDisplay1();






                Invoke(new MethodInvoker(delegate ()
                {
                    zoomTrackBarControl1.Value = (int)(ratio * 10);
                }));

            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("MapInfoComplete err :={0}", ex.Message.ToString());
            }
        }
        private void Map_Robot_Image_Processing2(ref Bitmap bmSource, int Width, int Height, byte[] sourcemapvalue, string strfiltername)
        {
            try
            {
                //
                // 여기서 부터 Picture Box의 이미지를 복사해 오는 부분입니다
                //
                Rectangle rect = new Rectangle(0, 0, bmSource.Width, bmSource.Height);
                System.Drawing.Imaging.BitmapData bmpData =
                    bmSource.LockBits(rect, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                    bmSource.PixelFormat);

                IntPtr ptr = bmpData.Scan0;
                byte[] rgbValues;


                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    rgbValues = new byte[Width * Height * 4];
                }
                else
                {
                    rgbValues = new byte[Width * Height];
                }

                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    var k = 0;
                    for (var y = 0; y < Height; y++)
                    {
                        for (var x = 0; x < Width; x++)
                        {
                            byte btemp = sourcemapvalue[y * Width + x];

                            if (strfiltername == "gray" || strfiltername == "cost" || strfiltername == "globalcost")
                            {
                                //if (btemp == 0) btemp = 0xff;
                                //else if (btemp == 0xff) btemp = 0xf0;
                            }
                            else
                            {
                                if (btemp == 0) btemp = 0xff;
                            }


                            #region  gray filter 그레이는 r,g,b가 동일 값으로 들어감
                            if (strfiltername == "gray" || strfiltername == "cost" || strfiltername == "globalcost")
                            {
                                rgbValues[k] = btemp;
                                rgbValues[k + 1] = btemp;
                                rgbValues[k + 2] = btemp;
                            }


                            #endregion

                            k += 4;
                        }
                    }
                }

                else
                {
                    for (int i = 0; i < Width * Height; i++)
                    {
                        rgbValues[i] = sourcemapvalue[i];
                    }
                }

                //
                // 여기까지가 Marshal Copy로 rgbValues 버퍼로 영상을 Copy해 오는 부분입니다.
                //

                //
                // 여기서부터 2차원 배열로 1차원 영상을 옮기는 부분입니다
                //
                double[,] Source = new double[Width, Height];
                double[,] Target = new double[Width, Height];

                int XPos, YPos = 0;
                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    for (int nH = 0; nH < Height; nH++)
                    {
                        XPos = 0;

                        if (strfiltername == "gray")
                            XPos = 0; //gray xpos

                        for (int nW = 0; nW < Width; nW++)
                        {
                            Source[nW, nH] = rgbValues[XPos + YPos];
                            Target[nW, nH] = rgbValues[XPos + YPos];
                            XPos += 4;
                        }
                        YPos += Width * 4;
                    }
                }
                else
                {
                    for (int nH = 0; nH < Height; nH++)
                    {
                        XPos = 0;
                        for (int nW = 0; nW < Width; nW++)
                        {
                            Source[nW, nH] = rgbValues[XPos + YPos];
                            Target[nW, nH] = rgbValues[XPos + YPos];
                            XPos++;
                        }
                        YPos += Width;
                    }
                }

                //
                // 여기까지는 2차원 배열로 영상을 복사하는 부분입니다.
                //

                //좌우반전//
                int nconvert = 0;

                //상하반전
                nconvert = 0;
                double[,] bconvertTarget = new double[Width, Height];
                for (int nh = 0; nh < Height; nh++)
                {
                    nconvert = 0;
                    for (int nw = 0; nw < Width; nw++)
                    {
                        bconvertTarget[nw, Height - nh - 1] = Target[nw, nh];
                        //nconvert++;
                    }
                }



                //
                // 여기서 부터는 2차원 배열을 다시 1차원 버터로 옮기는 부분입니다
                //

                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    rgbValues = new byte[Width * Height * 4];
                }
                else
                {
                    rgbValues = new byte[Width * Height];
                }

                YPos = 0;
                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    for (int nH = 0; nH < Height; nH++)
                    {
                        XPos = 0;
                        for (int nW = 0; nW < Width; nW++)
                        {

                            #region  gray filter 그레이는 r,g,b가 동일 값으로 들어감
                            if (strfiltername == "gray")
                            {
                                bconvertTarget[nW, nH] = (byte)(255 - (255 * bconvertTarget[nW, nH]) / 100);
                                rgbValues[XPos + YPos] = (byte)bconvertTarget[nW, nH];
                                rgbValues[XPos + YPos + 1] = (byte)bconvertTarget[nW, nH];
                                rgbValues[XPos + YPos + 2] = (byte)bconvertTarget[nW, nH];
                            }

                            #endregion

                            if (strfiltername == "globalcost")
                            {
                                bconvertTarget[nW, nH] = (byte)(255 - (255 * bconvertTarget[nW, nH]) / 100);
                                rgbValues[XPos + YPos] = (byte)bconvertTarget[nW, nH];
                                rgbValues[XPos + YPos + 1] = (byte)bconvertTarget[nW, nH];
                                rgbValues[XPos + YPos + 2] = (byte)bconvertTarget[nW, nH];
                            }

                            #region  cost map filter
                            if (strfiltername == "cost")
                            {
                                //cost map 색상 테스트
                                if (bconvertTarget[nW, nH] < 36)
                                {
                                    rgbValues[XPos + YPos] = 0xff;
                                    rgbValues[XPos + YPos + 1] = 0xff;
                                    rgbValues[XPos + YPos + 2] = 0xff;
                                    rgbValues[XPos + YPos + 3] = 255;
                                }

                                else if (bconvertTarget[nW, nH] == 100) // lethal obstacle values (100) in purple
                                {
                                    rgbValues[XPos + YPos] = 255;
                                    rgbValues[XPos + YPos + 1] = 0;
                                    rgbValues[XPos + YPos + 2] = 255;
                                    rgbValues[XPos + YPos + 3] = 255;
                                }
                                else if (bconvertTarget[nW, nH] > 101 && bconvertTarget[nW, nH] < 128) // illegal positive values in green
                                {
                                    rgbValues[XPos + YPos] = 0;
                                    rgbValues[XPos + YPos + 1] = 255;
                                    rgbValues[XPos + YPos + 2] = 0;
                                    rgbValues[XPos + YPos + 3] = 255;
                                }

                                else if (bconvertTarget[nW, nH] > 155 && bconvertTarget[nW, nH] < 255) // illegal negative (char) values in shades of red/yellow
                                {
                                    rgbValues[XPos + YPos] = 255;
                                    rgbValues[XPos + YPos + 1] = (byte)((255 * (bconvertTarget[nW, nH] - 128)) / (254 - 128));
                                    rgbValues[XPos + YPos + 2] = 0;
                                    rgbValues[XPos + YPos + 3] = 255;
                                }
                                else
                                {
                                    rgbValues[XPos + YPos] = 255;
                                    rgbValues[XPos + YPos + 1] = 255;
                                    rgbValues[XPos + YPos + 2] = (byte)bconvertTarget[nW, nH];
                                    rgbValues[XPos + YPos + 3] = 255;
                                }

                               
                            }
                            #endregion

                            XPos += 4;
                        }
                        YPos += Width * 4;

                    }
                }
                else
                {
                    for (int nH = 0; nH < Height; nH++)
                    {
                        XPos = 0;
                        for (int nW = 0; nW < Width; nW++)
                        {
                            rgbValues[XPos + YPos] = (byte)bconvertTarget[nW, nH];

                            XPos++;
                        }
                        YPos += Width;
                    }
                }


                //
                // 다시 Marshal Copy로 Picture Box로 옮기는 부분입니다
                //
                if (bmSource.PixelFormat == PixelFormat.Format32bppArgb || bmSource.PixelFormat == PixelFormat.Format32bppRgb)
                {
                    System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, Width * Height * 4);
                }
                else
                {
                    System.Runtime.InteropServices.Marshal.Copy(rgbValues, 0, ptr, Width * Height);
                }

                bmSource.UnlockBits(bmpData);

                //System.Drawing.Rectangle cropArea = new System.Drawing.Rectangle(6, 6, Width - 12, Height - 12);
                System.Drawing.Rectangle cropArea = new System.Drawing.Rectangle(0, 0, Width, Height);
                Bitmap bmpTemp = bmSource.Clone(cropArea, bmSource.PixelFormat);
                bmSource.Dispose();
                bmSource = null;
                bmSource = (Bitmap)(bmpTemp.Clone());
            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("Map_Robot_Image_Processing2 err :={0}", ex.Message.ToString());
            }

        }
        public void onMapDisplay1()
        {
            try
            {

                Bitmap bmSource = new Bitmap(nSourceMapWidth, nSourceMapHeight, PixelFormat.Format32bppRgb);//, PixelFormat.Format8bppIndexed);

                Bitmap bmMergeOKSource = new Bitmap(nSourceMapWidth, nSourceMapHeight, PixelFormat.Format32bppRgb);//, PixelFormat.Format8bppIndexed);

                Map_Robot_Image_Processing2(ref bmSource, bmSource.Width, bmSource.Height, sourceMapValues, "gray");

                dOrignX = ((ori_x * -1) / resoultion1);
                dOrignY = ((ori_y) / resoultion1);

                if (dOrignY < 0) dOrignY *= -1;
                dOrignY = nSourceMapHeight - dOrignY;


                bMaploading = true;

                if (bcostmaploading)
                {
                    Bitmap bmcost = new Bitmap(nSourceMapWidth, nSourceMapHeight, PixelFormat.Format32bppRgb);
                    Graphics g2 = Graphics.FromImage(bmcost);
                    foreach (KeyValuePair<string, Robot_RegInfo> info in Data.Instance.Robot_RegInfo_list)
                    //    for (int ii = 0; ii < mainform.G_robotList.Count; ii++)
                    {
                        string strrobotname = info.Key;

                        if (Data.Instance.Robot_work_info[strrobotname].robot_status_info.localcostmap.msg == null) continue;

                        float cellX1 = Data.Instance.Robot_work_info[strrobotname].costmap_originX / resoultion1;
                        float cellY1 = Data.Instance.Robot_work_info[strrobotname].costmap_originY / resoultion1;

                        PointF pos = new PointF();
                        pos.X = dOrignX + cellX1;
                        pos.Y = dOrignY - cellY1;

                        Bitmap costmap_temp = (Bitmap)Data.Instance.Robot_work_info[strrobotname].costmap;

                        Rectangle cost_map = new Rectangle(0, 0, costmap_temp.Width, costmap_temp.Height);
                        System.Drawing.Imaging.BitmapData bmpData_costmap =
                           costmap_temp.LockBits(cost_map, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                           costmap_temp.PixelFormat);

                        IntPtr ptr_costmap = bmpData_costmap.Scan0;
                        byte[] sourceMapValues_costmap = new byte[costmap_temp.Width * costmap_temp.Height * 4];
                        {
                            System.Runtime.InteropServices.Marshal.Copy(ptr_costmap, sourceMapValues_costmap, 0, costmap_temp.Width * costmap_temp.Height * 4);
                        }

                        costmap_temp.UnlockBits(bmpData_costmap);
                        int pos_cost = 0;
                        for (int iy = 0; iy < costmap_temp.Height; iy++)
                        {
                            for (int ix = 0; ix < costmap_temp.Width; ix++)
                            {
                                int color1 = (int)sourceMapValues_costmap[pos_cost];
                                int color2 = (int)sourceMapValues_costmap[pos_cost + 1];
                                int color3 = (int)sourceMapValues_costmap[pos_cost + 2];
                                int color4 = (int)sourceMapValues_costmap[pos_cost + 3];

                                if (color1 == 0 && color2 == 0 && color3 == 0) { }
                                else if (color1 == 255 && color2 == 255 && color3 == 255) { }
                                else if (color1 == 0x80 || color2 == 0x80 || color3 == 0x80 || color4 == 0x80)
                                {
                                }
                                else if (color1 == 0xbe || color2 == 0xbe || color3 == 0xbe || color4 == 0xbf)
                                {
                                }
                                else if (color1 == 0x40 || color2 == 0x40 || color3 == 0x40 || color4 == 0x40)
                                {
                                }
                                else
                                {
                                    bmcost.SetPixel((int)pos.X + ix, (int)(pos.Y - costmap_temp.Height + iy), Color.FromArgb((int)sourceMapValues_costmap[pos_cost], (int)sourceMapValues_costmap[pos_cost + 1], (int)sourceMapValues_costmap[pos_cost + 2]));
                                }
                                pos_cost += 4;
                            }
                        }
                    }



                    Rectangle r_map = new Rectangle(0, 0, nSourceMapWidth, nSourceMapHeight);
                    System.Drawing.Imaging.BitmapData bmpData_map =
                       bmSource.LockBits(r_map, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                       bmSource.PixelFormat);

                    IntPtr ptr_map = bmpData_map.Scan0;
                    byte[] sourceMapValues_map = new byte[nSourceMapWidth * nSourceMapHeight * 4];
                    {
                        System.Runtime.InteropServices.Marshal.Copy(ptr_map, sourceMapValues_map, 0, nSourceMapWidth * nSourceMapHeight * 4);
                    }

                    bmSource.UnlockBits(bmpData_map);

                    Rectangle r1 = new Rectangle(0, 0, nSourceMapWidth, nSourceMapHeight);
                    System.Drawing.Imaging.BitmapData bmpData_r1 =
                       bmcost.LockBits(r1, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                       bmcost.PixelFormat);

                    IntPtr ptr_r1 = bmpData_r1.Scan0;
                    byte[] sourceMapValues_r1 = new byte[nSourceMapWidth * nSourceMapHeight * 4];
                    {
                        System.Runtime.InteropServices.Marshal.Copy(ptr_r1, sourceMapValues_r1, 0, bmcost.Width * bmcost.Height * 4);
                    }
                    bmcost.UnlockBits(bmpData_r1);

                    int cnt = 0;
                    for (int i = 0; i < nSourceMapWidth * nSourceMapHeight * 4; i++)
                    {
                        if (sourceMapValues_r1[i] == 0x00)
                        {

                        }
                        else if (sourceMapValues_r1[i] == 0xff)
                        {

                        }
                        else if (sourceMapValues_r1[i] == 0x80 || sourceMapValues_r1[i + 1] == 0x80 || sourceMapValues_r1[i + 2] == 0x80 || sourceMapValues_r1[i + 3] == 0x80)
                        {
                            i += 4;
                        }
                        else if (sourceMapValues_r1[i] == 0xbe || sourceMapValues_r1[i + 1] == 0xbe || sourceMapValues_r1[i + 2] == 0xbe || sourceMapValues_r1[i + 3] == 0xbf)
                        {
                            i += 4;
                        }
                        else if (sourceMapValues_r1[i] == 0x40 || sourceMapValues_r1[i + 1] == 0x40 || sourceMapValues_r1[i + 2] == 0x40 || sourceMapValues_r1[i + 3] == 0x40)
                        {
                            i += 4;
                        }
                        else
                        {
                            {
                                sourceMapValues_map[i] = (byte)(sourceMapValues_r1[i]);
                            }
                        }

                    }



                    Rectangle or_map = new Rectangle(0, 0, nSourceMapWidth, nSourceMapHeight);
                    System.Drawing.Imaging.BitmapData bmpData_ormap =
                       bmMergeOKSource.LockBits(or_map, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                       bmMergeOKSource.PixelFormat);
                    IntPtr ptr_or = bmpData_ormap.Scan0;
                    System.Runtime.InteropServices.Marshal.Copy(sourceMapValues_map, 0, ptr_or, nSourceMapWidth * nSourceMapHeight * 4);

                    bmMergeOKSource.UnlockBits(bmpData_ormap);

                    g2.Dispose();
                }


                if (bGlobalcostmaploading)
                {
                    Bitmap bmglobalcost = new Bitmap(nSourceMapWidth, nSourceMapHeight, PixelFormat.Format32bppRgb);
                    Graphics g2 = Graphics.FromImage(bmglobalcost);


                    if (Data.Instance.Robot_work_info[m_strRobotName].robot_status_info.globalcostmap.msg == null) return;

                    float cellX1 = Data.Instance.Robot_work_info[m_strRobotName].globalcostmap_originX / resoultion1;
                    float cellY1 = Data.Instance.Robot_work_info[m_strRobotName].globalcostmap_originY / resoultion1;

                    PointF pos = new PointF();
                    pos.X = dOrignX + cellX1;
                    pos.Y = dOrignY - cellY1;

                    Bitmap globalcostmap_temp = (Bitmap)Data.Instance.Robot_work_info[m_strRobotName].globalcostmap;

                    Rectangle globalcost_map = new Rectangle(0, 0, globalcostmap_temp.Width, globalcostmap_temp.Height);
                    System.Drawing.Imaging.BitmapData bmpData_globalcostmap =
                        globalcostmap_temp.LockBits(globalcost_map, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                        globalcostmap_temp.PixelFormat);

                    IntPtr ptr_globalcostmap = bmpData_globalcostmap.Scan0;
                    byte[] sourceMapValues_globalcostmap = new byte[globalcostmap_temp.Width * globalcostmap_temp.Height * 4];
                    {
                        System.Runtime.InteropServices.Marshal.Copy(ptr_globalcostmap, sourceMapValues_globalcostmap, 0, globalcostmap_temp.Width * globalcostmap_temp.Height * 4);
                    }

                    globalcostmap_temp.UnlockBits(bmpData_globalcostmap);


                    int pos_cost = 0;
                    for (int iy = 0; iy < globalcostmap_temp.Height; iy++)
                    {
                        for (int ix = 0; ix < globalcostmap_temp.Width; ix++)
                        {
                            bmglobalcost.SetPixel(ix, iy, Color.FromArgb((int)sourceMapValues_globalcostmap[pos_cost], (int)sourceMapValues_globalcostmap[pos_cost + 1], (int)sourceMapValues_globalcostmap[pos_cost + 2]));

                            pos_cost += 4;
                        }
                    }


                    Rectangle r_map = new Rectangle(0, 0, nSourceMapWidth, nSourceMapHeight);
                    System.Drawing.Imaging.BitmapData bmpData_map =
                       bmSource.LockBits(r_map, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                       bmSource.PixelFormat);

                    IntPtr ptr_map = bmpData_map.Scan0;
                    byte[] sourceMapValues_map = new byte[nSourceMapWidth * nSourceMapHeight * 4];
                    {
                        System.Runtime.InteropServices.Marshal.Copy(ptr_map, sourceMapValues_map, 0, nSourceMapWidth * nSourceMapHeight * 4);
                    }

                    bmSource.UnlockBits(bmpData_map);

                    Rectangle r1 = new Rectangle(0, 0, nSourceMapWidth, nSourceMapHeight);
                    System.Drawing.Imaging.BitmapData bmpData_globalr1 =
                       bmglobalcost.LockBits(r1, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                       bmglobalcost.PixelFormat);

                    IntPtr ptr_r1 = bmpData_globalr1.Scan0;
                    byte[] sourceMapValues_globalr1 = new byte[nSourceMapWidth * nSourceMapHeight * 4];
                    {
                        System.Runtime.InteropServices.Marshal.Copy(ptr_r1, sourceMapValues_globalr1, 0, bmglobalcost.Width * bmglobalcost.Height * 4);
                    }
                    bmglobalcost.UnlockBits(bmpData_globalr1);

                    int cnt = 0;
                    for (int i = 0; i < nSourceMapWidth * nSourceMapHeight * 4; i++)
                    {
                        if (sourceMapValues_globalr1[i] == 0x02)
                        {
                            sourceMapValues_map[i] = 125;
                        }
                        /* if (sourceMapValues_globalr1[i] == 0x02 || sourceMapValues_globalr1[i + 1] == 0x02 || sourceMapValues_globalr1[i + 2] == 0x02 )
                         {
                             sourceMapValues_globalr1[i] = 230;
                             sourceMapValues_globalr1[i+1] = 230;
                             sourceMapValues_globalr1[i+2] = 230;

                             sourceMapValues_map[i] = sourceMapValues_globalr1[i];
                             sourceMapValues_map[i+1] = sourceMapValues_globalr1[i+1];
                             sourceMapValues_map[i+2] = sourceMapValues_globalr1[i+2];
                             //sourceMapValues_map[i + 3] = 0;

                             i += 3;
                         }*/
                        else
                            sourceMapValues_map[i] = (byte)(sourceMapValues_globalr1[i]);

                    }



                    Rectangle or_map = new Rectangle(0, 0, nSourceMapWidth, nSourceMapHeight);
                    System.Drawing.Imaging.BitmapData bmpData_ormap =
                       bmMergeOKSource.LockBits(or_map, System.Drawing.Imaging.ImageLockMode.ReadWrite,
                       bmMergeOKSource.PixelFormat);
                    IntPtr ptr_or = bmpData_ormap.Scan0;
                    System.Runtime.InteropServices.Marshal.Copy(sourceMapValues_map, 0, ptr_or, nSourceMapWidth * nSourceMapHeight * 4);

                    bmMergeOKSource.UnlockBits(bmpData_ormap);

                    g2.Dispose();
                }

                dOrignX = dOrignX * ratio + translate_x;
                dOrignY = dOrignY * ratio + translate_y;

                Image imgSource_Chg;

                if (bcostmaploading)
                {
                    imgSource_Chg = ZoomIn(bmMergeOKSource, ratio);
                }
                else if (bGlobalcostmaploading)
                {
                    imgSource_Chg = ZoomIn(bmMergeOKSource, ratio);
                }
                else
                {
                    imgSource_Chg = ZoomIn(bmSource, ratio);
                }

                Bitmap translateBmp = new Bitmap(imgSource_Chg.Width, imgSource_Chg.Height);
                translateBmp.SetResolution(imgSource_Chg.HorizontalResolution, imgSource_Chg.VerticalResolution);

                Graphics g = Graphics.FromImage(translateBmp);
                g.TranslateTransform(translate_x, translate_y);
                g.DrawImage(imgSource_Chg, new PointF(0, 0));

                pb_map.Image = translateBmp;

                pb_map.Invalidate();

                bmSource.Dispose();
                bmMergeOKSource.Dispose();



            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("onMapDisplay1 err :={0}", ex.Message.ToString());
            }
        }
        private void simpleButton14_Click(object sender, EventArgs e)
        {
            onCrash_Start();
        }
        Image ZoomIn(Image img, double nresolution)
        {

            Bitmap bmp = new Bitmap(img, (int)(img.Width * nresolution), (int)(img.Height * nresolution));
            bmp.SetResolution((int)(bmp.VerticalResolution * nresolution), (int)(bmp.HorizontalResolution * nresolution));
            Graphics g = Graphics.FromImage(bmp);

            g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
            return bmp;
        }
        private void onCrash_Start()
        {
            try
            {
                timer_StartTrack.Enabled = false;
                ncurrTaskRobotid_idx = 0;
                strCurrStartRobot = "";

                crashrobot_run_list.Clear();
                crashrobot_pause_list.Clear();

                crashrobot_Linedrive_run_list.Clear();
                crashrobot_Linedrive_pause_list.Clear();

                crashrobot_Sdrive_run_list.Clear();
                crashrobot_Sdrive_pause_list.Clear();

                Invoke(new MethodInvoker(delegate ()
                {
                    listBox2.Items.Clear();
                }));

                Data.Instance.bCrashcheckStop = false;

                crashchk_thread = new Thread(onCrashCheck_Thread);
                crashchk_thread.IsBackground = true;
                crashchk_thread.Start();

                //crashchk_Linedrive_thread = new Thread(onCrashCheck_Linedrive_Thread);
                //crashchk_Linedrive_thread.Start();

                //crashchk_Sdrive_thread = new Thread(onCrashCheck_Sdrive_Thread);
                //crashchk_Sdrive_thread.Start();



            }
            catch (Exception ex)
            {
                Console.WriteLine("onCrash_Start err=" + ex.Message.ToString());
            }
        }
        private void timer_StartTrack_Tick(object sender, EventArgs e)
        {
            try
            {
                if (!bstarttrack_timerflag) return;

                if (ncurrTaskRobotid_idx >= currTaskRobotid.Length - 1)
                {
                    bstarttrack_timerflag = false;
                    //timer_StartTrack.Stop();
                    //timer_StartTrack.Enabled = false;
                    ncurrTaskRobotid_idx = 0;
                    strCurrStartRobot = "";
                }
                else
                {
                    if (strCurrStartRobot == "") return;

                    if (Data.Instance.Robot_work_info[strCurrStartRobot].robot_status_info.taskfeedback == null) return;
                    if (Data.Instance.Robot_work_info[strCurrStartRobot].robot_status_info.taskfeedback.msg == null) return;

                    if (Data.Instance.Robot_work_info[strCurrStartRobot].robot_status_info.taskfeedback.msg.feedback.action_indx == 1)
                    {
                        ncurrTaskRobotid_idx++;

                        int nwaitpos_To_demorun_Totalrobotcnt = strWaitPosMove_Robot.Count;

                        if (nwaitpos_To_demorun_Currentrobotidx >= nwaitpos_To_demorun_Totalrobotcnt) return;

                        KeyValuePair<string, string> waitposmove_robotinfo = strWaitPosMove_Robot.ElementAt(nwaitpos_To_demorun_Totalrobotcnt - (nwaitpos_To_demorun_Currentrobotidx + 1));

                        string strmissionid = waitposmove_robotinfo.Key;
                        string strrobotid = waitposmove_robotinfo.Value;

                        if (strrobotid != "")
                        {
                            //미션1에 제일 먼 로봇부터 resume 시킨다. 
                            strCurrStartRobot = strrobotid;
                            Thread.Sleep(1000);



                            commBridge.onMissionChange_publish(strrobotid, strStartMissionid);
                            robot_demoinfo[strrobotid].currmissionid = strStartMissionid;
                            Console.WriteLine("mission change timer = {0},,robot={1}", strStartMissionid, strrobotid);
                            //onConsolemsgDp(string.Format("mission change timer = {0},,robot={1}", strStartMissionid, strrobotid));

                            onTaskResum(strrobotid);

                            CrashCheckRobot_list.Add(strrobotid);
                            strWaitPosMove_Robot[strmissionid] = "";
                            strWaitPosMove_Robot_one[strmissionid] = "";
                            Console.WriteLine("startrobot={0}", strCurrStartRobot);
                            onConsolemsgDp(string.Format("startrobot={0}", strCurrStartRobot));
                        }

                        nwaitpos_To_demorun_Currentrobotidx++;

                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("timer_StartTrack_Tick err=" + ex.Message.ToString());
            }
        }
        private void onCrashCheck_Thread()
        {
            for (; ; )
            {
                if (Data.Instance.bCrashcheckStop) break;

                if (Data.Instance.bCrashcheckPause) { }
                else
                    onCrashCheck();

                Thread.Sleep(50);
            }
        }
        private void onCrashCheck()
        {
            try
            {

                int ncheckcnt = CrashCheckRobot_list.Count;
                if (ncheckcnt > 0)
                {
                    Invoke(new MethodInvoker(delegate ()
                    {
                        listBox5.Items.Clear();
                        for (int ii = 0; ii < ncheckcnt; ii++)
                        {
                            string strrobot = CrashCheckRobot_list[ii];
                            listBox5.Items.Add(strrobot);
                        }
                    }));


                    string sourceRobot = "";
                    string targetRobot = "";
                    for (int i = 0; i < ncheckcnt; i++)
                    {
                        sourceRobot = CrashCheckRobot_list[i];

                        for (int j = 0; j < ncheckcnt; j++)
                        {
                            targetRobot = CrashCheckRobot_list[j];

                            if (sourceRobot != targetRobot)
                            {
                                string strmsg2 = string.Format("{0}_{1}", sourceRobot, targetRobot);

                                if (Data.Instance.Robot_work_info[sourceRobot].robot_status_info.robotstate == null)
                                {
                                    string strmsg1 = string.Format("source={0}, robotstate fail", sourceRobot);

                                    Invoke(new MethodInvoker(delegate ()
                                    {
                                        listBox1.Items.Add(strmsg1);
                                        listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                    }));
                                    break;
                                }
                                if (Data.Instance.Robot_work_info[sourceRobot].robot_status_info.robotstate.msg == null)
                                {
                                    string strmsg1 = string.Format("source={0}, robotstate msg fail", sourceRobot);

                                    Invoke(new MethodInvoker(delegate ()
                                    {
                                        listBox1.Items.Add(strmsg1);
                                        listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                    }));
                                    break;
                                }

                                if (Data.Instance.Robot_work_info[sourceRobot].robot_status_info.lookahead == null)
                                {
                                    string strmsg1 = string.Format("source={0}, lookahead fail", sourceRobot);

                                    Invoke(new MethodInvoker(delegate ()
                                    {
                                        listBox1.Items.Add(strmsg1);
                                        listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                    }));
                                    break;
                                }
                                if (Data.Instance.Robot_work_info[sourceRobot].robot_status_info.lookahead.msg == null)
                                {
                                    string strmsg1 = string.Format("source={0}, lookahead  msg fail", sourceRobot);

                                    Invoke(new MethodInvoker(delegate ()
                                    {
                                        listBox1.Items.Add(strmsg1);
                                        listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                    }));
                                    break;
                                }

                                if (Data.Instance.Robot_work_info[targetRobot].robot_status_info.robotstate == null)
                                {
                                    string strmsg1 = string.Format("targetRobot={0}, robotstate fail", sourceRobot);

                                    Invoke(new MethodInvoker(delegate ()
                                    {
                                        listBox1.Items.Add(strmsg1);
                                        listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                    }));
                                    continue;
                                }
                                if (Data.Instance.Robot_work_info[targetRobot].robot_status_info.robotstate.msg == null)
                                {
                                    string strmsg1 = string.Format("targetRobot={0}, robotstate  msg fail", sourceRobot);

                                    Invoke(new MethodInvoker(delegate ()
                                    {
                                        listBox1.Items.Add(strmsg1);
                                        listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                    }));
                                    continue;
                                }

                                if (Data.Instance.Robot_work_info[targetRobot].robot_status_info.lookahead == null)
                                {
                                    string strmsg1 = string.Format("targetRobot={0}, lookahead   fail", sourceRobot);

                                    Invoke(new MethodInvoker(delegate ()
                                    {
                                        listBox1.Items.Add(strmsg1);
                                        listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                    }));
                                    continue;
                                }
                                if (Data.Instance.Robot_work_info[targetRobot].robot_status_info.lookahead.msg == null)
                                {
                                    string strmsg1 = string.Format("targetRobot={0}, lookahead  msg  fail", sourceRobot);

                                    Invoke(new MethodInvoker(delegate ()
                                    {
                                        listBox1.Items.Add(strmsg1);
                                        listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                    }));
                                    continue;
                                }

                                double source_x = 0;
                                double source_y = 0;
                                double source_lookahead_x = 0;
                                double source_lookahead_y = 0;

                                int nsource_priority = 0;

                                double target_x = 0;
                                double target_y = 0;
                                double target_lookahead_x = 0;
                                double target_lookahead_y = 0;
                                int ntargetpriority = 0;


                                source_x = Data.Instance.Robot_work_info[sourceRobot].robot_status_info.robotstate.msg.pose.x;
                                source_y = Data.Instance.Robot_work_info[sourceRobot].robot_status_info.robotstate.msg.pose.y;
                                source_lookahead_x = Data.Instance.Robot_work_info[sourceRobot].robot_status_info.lookahead.msg.point.x;
                                source_lookahead_y = Data.Instance.Robot_work_info[sourceRobot].robot_status_info.lookahead.msg.point.y;
                                nsource_priority = Data.Instance.Robot_work_info[sourceRobot].nPriorityLevel;

                                target_x = Data.Instance.Robot_work_info[targetRobot].robot_status_info.robotstate.msg.pose.x;
                                target_y = Data.Instance.Robot_work_info[targetRobot].robot_status_info.robotstate.msg.pose.y;
                                target_lookahead_x = Data.Instance.Robot_work_info[targetRobot].robot_status_info.lookahead.msg.point.x;
                                target_lookahead_y = Data.Instance.Robot_work_info[targetRobot].robot_status_info.lookahead.msg.point.y;
                                ntargetpriority = Data.Instance.Robot_work_info[targetRobot].nPriorityLevel;


                                double dist_LA = onPointToPointDist(source_lookahead_x, source_lookahead_y, target_lookahead_x, target_lookahead_y);
                                double dist_SourceCenToTargetLA = onPointToPointDist(source_x, source_y, target_lookahead_x, target_lookahead_y);
                                double dist_TargetCenToSourceLA = onPointToPointDist(target_x, target_y, source_lookahead_x, source_lookahead_y);
                                //double dist_LA = onPointToPointDist(source_x, source_y, target_x, target_y);



                                string strmsg = string.Format("{0}_{1} LA ={2:f2}, SourceCenToTargetLA={3:f2}, TargetCenToSourceLA={4:f2}", sourceRobot, targetRobot, dist_LA, dist_SourceCenToTargetLA, dist_TargetCenToSourceLA);
                                strmsg2 = string.Format("{0}_{1}", sourceRobot, targetRobot);
                                Invoke(new MethodInvoker(delegate ()
                                {
                                    listBox1.Items.Add(strmsg2);
                                    listBox1.Items.Add(strmsg);
                                    listBox1.SelectedIndex = listBox1.Items.Count - 1;
                                }));
                                if (dist_LA < 2.18 && dist_LA > 0) //crash warnning
                                {
                                    int runcnt = crashrobot_run_list.Count;

                                    bool bskip = false;
                                    if (runcnt > 0)
                                    {
                                        for (int r = 0; r < runcnt; r++)
                                        {
                                            if (crashrobot_run_list[r] == sourceRobot && crashrobot_pause_list[r] == targetRobot)
                                            {
                                                bskip = true;
                                                break;
                                                //return;
                                            }
                                            else if (crashrobot_run_list[r] == targetRobot && crashrobot_pause_list[r] == sourceRobot)
                                            {
                                                bskip = true;
                                                break;
                                                //return;
                                            }
                                        }
                                    }

                                    if (!bskip)
                                    {

                                        if (dist_SourceCenToTargetLA < dist_TargetCenToSourceLA) //source move , target pause
                                        {
                                            onCrashCheck_ToProcessRobot(sourceRobot, targetRobot);
                                        }
                                        else
                                        {
                                            onCrashCheck_ToProcessRobot(targetRobot, sourceRobot);
                                        }
                                    }
                                }
                                else
                                {
                                    int nlistcnt = crashrobot_run_list.Count;
                                    if (nlistcnt > 0)
                                    {
                                        for (int nix = 0; nix < nlistcnt; nix++)
                                        {
                                            string strlist_source = crashrobot_run_list[nix];
                                            string strlist_target = crashrobot_pause_list[nix];

                                            if (sourceRobot == strlist_source && targetRobot == strlist_target)
                                            {
                                                if (Data.Instance.Robot_work_info[targetRobot].robot_status_info.taskfeedback.msg.feedback.is_paused)
                                                {
                                                    onTaskResum(targetRobot);
                                                    //Thread.Sleep(300);
                                                    crashrobot_run_list.RemoveAt(nix);
                                                    crashrobot_pause_list.RemoveAt(nix);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }

                                Invoke(new MethodInvoker(delegate ()
                                {
                                    if (crashrobot_run_list.Count > 0)
                                        listBox2.Items.Clear();

                                    for (int k = 0; k < crashrobot_run_list.Count; k++)
                                    {
                                        string strtemp = string.Format("run={0},pause={1}", crashrobot_run_list[k], crashrobot_pause_list[k]);
                                        listBox2.Items.Add(strtemp);
                                    }
                                    listBox2.SelectedIndex = listBox2.Items.Count - 1;
                                }));
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("onCrashCheck err=" + ex.Message.ToString());
            }
        }
        private void gridView1_RowCellClick(object sender, DevExpress.XtraGrid.Views.Grid.RowCellClickEventArgs e)
        {
            taskid = gridView1.GetFocusedRowCellValue("task_id").ToString();
            taskname = gridView1.GetFocusedRowCellValue("task_name").ToString();
            missionlist = gridView1.GetFocusedRowCellValue("mission_list").ToString();
            robotlist = gridView1.GetFocusedRowCellValue("robot_list").ToString();

            actionIDX = gridView1.GetDataSourceRowIndex(e.RowHandle);
            //test.Text = taskname;

        }
        public void onConsolemsgDp(string strmsg)
        {
            Invoke(new MethodInvoker(delegate ()
            {
                listBox6.Items.Add(strmsg);
                listBox6.SelectedIndex = listBox6.Items.Count - 1;
            }));
        }
        public async void onTaskResum(string robotid)
        {
            try
            {
                string strRobot = robotid;
                //var task = Task.Run(() => mainform.commBridge.onTaskResume_publish(strRobot, ""));
                //await task;
                commBridge.onTaskResume_publish(strRobot, "");
                // Thread.Sleep(100);

                Console.WriteLine("resume = {0}", strRobot);

                //onConsolemsgDp(string.Format("resume = {0}", strRobot));
            }
            catch (Exception ex)
            {
                Console.WriteLine("onTaskResum err=" + ex.Message.ToString());
            }
        }
        private void onCrashCheck_ToProcessRobot(string strRunrobot, string strPauserobot)
        {
            if (!Data.Instance.Robot_work_info[strPauserobot].robot_status_info.taskfeedback.msg.feedback.is_paused)//&& !Data.Instance.Robot_work_info[strRunrobot].robot_status_info.taskfeedback.msg.feedback.is_paused)
            {
                onTaskPause(strPauserobot);
                //Thread.Sleep(300);

                crashrobot_run_list.Add(strRunrobot);
                crashrobot_pause_list.Add(strPauserobot);

                Invoke(new MethodInvoker(delegate ()
                {
                    listBox1.Items.Add(string.Format("{0:f2}.. pause", strPauserobot));
                    listBox1.SelectedIndex = listBox1.Items.Count - 1;
                }));

                onConsolemsgDp(string.Format("crash pause = {0:f2}.. pause", strPauserobot));
                Console.WriteLine("crash pause = {0:f2}.. pause", strPauserobot);
            }
        }
        public async void onTaskPause(string robotid)
        {
            try
            {
                string strRobot = robotid;
                //var task = Task.Run(() => mainform.commBridge.onTaskPause_publish(strRobot, ""));
                //await task;
                commBridge.onTaskPause_publish(strRobot, "");
                // Thread.Sleep(200);

                Console.WriteLine("pause1 = {0}", strRobot);
                onConsolemsgDp(string.Format("pause1 = {0}", strRobot));

                commBridge.onTaskPause_publish(strRobot, "");
                //  Thread.Sleep(200);

                Console.WriteLine("pause2 = {0}", strRobot);
                onConsolemsgDp(string.Format("pause2 = {0}", strRobot));
            }
            catch (Exception ex)
            {
                Console.WriteLine("onTaskCancel err=" + ex.Message.ToString());
            }
        }
        public class Robot_Demo_Info
        {
            public string strrobotid;
            public string strdemomode;
            public int workcnt;
            public int currcnt;

            public string currmissionid;

            public int lineonlycnt;
            public int curr_lineonlycnt;

            public int Sonlycnt;
            public int curr_Sonlycnt;

            public int liftlinecnt;
            public int curr_liftlinecnt;

            public int line2cnt;
            public int curr_line2cnt;

            public int liftonlycnt;
            public int curr_liftonlycnt;

            public int s1cnt;
            public int curr_s1cnt;

            public int s2cnt;
            public int curr_s2cnt;

            public int urcnt;
            public int curr_urcnt;

            public bool actcomplete;
        }
        public double onPointToPointDist(double x1, double y1, double x2, double y2)
        {
            double hypo = Math.Sqrt(Math.Pow(x1 - x2, 2) + Math.Pow(y1 - y2, 2));
            return hypo;
        }

        

        private void simpleButton12_Click(object sender, EventArgs e)
        {
            
            convCheck.Interval = 500;
            convCheck.Enabled = true;

            convFinish = false;


            robot5idx = 2; // 1
            robot4idx = 2;
            robot1idx = 1;
            RED = false;
            GREEN = false;
            strCurr5_MissionID = "";
            strCurr4_MissionID = "";
            strCurr1_MissionID = "";

            strCurr5_MissionID = basic_mission;
            strCurr4_MissionID = basic_mission;

            str5_mode = "basicmode";
            str4_mode = "basicmode";

            try
            {
                Data.Instance.bCrashcheckPause = false;
                bLinedrive1_waitok = false;
                bLinedrive2_waitok = false;

                nlinedriveCnt = 0;

                nbasicmoveCnt = 0;
                nliftCnt = 0;

                bTmpMove = false;
                bTmpMove_pause_robotid = "";
                bTmpMove_run_robotid = "";


                strCurrStartRobot = "";
                if (Data.Instance.isConnected)
                {
                    int nrow = actionIDX;


                    if (gridView1.GetFocusedRowCellValue("task_id").ToString() == "")
                    {
                        return;
                    }
                    string taskid = gridView1.GetFocusedRowCellValue("task_id").ToString();
                    string taskname = gridView1.GetFocusedRowCellValue("task_name").ToString();
                    string missionlist = gridView1.GetFocusedRowCellValue("mission_list").ToString();
                    string robotlist = gridView1.GetFocusedRowCellValue("robot_list").ToString();

                    string[] missionbuf = missionlist.Split(',');
                    string[] robotbuf = robotlist.Split(',');

                    int ntaskcnt = 0;
                    string strMsg = "";


                    currTaskRobotid = new string[robotbuf.Length];
                    ncurrTaskRobotid_idx = 0;
                    strStartMissionid = "";
                    StartRobot_Skip.Clear();
                    CrashCheckRobot_list.Clear();
                    CrashCheckRobot_Linedrive_list.Clear();
                    Data.Instance.bMissionCompleteCheck = false;


                    for (int i = 0; i < robotbuf.Length; i++)
                    {
                        string strrobotcnt = string.Format("{0}", ntaskcnt);

                        strMsg += string.Format("{0},반복({1}) ", robotbuf[i], strrobotcnt);

                        currTaskRobotid[i] = robotbuf[i];
                    }

                    strMsg += " 동작 하시겠습니까?";

                    if (DialogResult.OK == MessageBox.Show(strMsg, "확인", MessageBoxButtons.OKCancel))
                    {
                        int ntaskcnt1 = 0;

                        Data.Instance.bMissionCompleteCheck = true;

                        for (int i = 0; i < robotbuf.Length; i++)
                        {
                            if (Data.Instance.Robot_work_info[robotbuf[i]].robot_status_info.taskfeedback != null)
                            {
                                if (Data.Instance.Robot_work_info[robotbuf[i]].robot_status_info.taskfeedback.msg != null)
                                {
                                    Data.Instance.Robot_work_info[robotbuf[i]].robot_status_info.taskfeedback.msg.feedback.action_indx = 0;
                                    Data.Instance.Robot_work_info[robotbuf[i]].robot_status_info.taskfeedback.msg.feedback.mission_indx = 0;
                                }
                            }
                        }

                        listBox1.Items.Clear();

                        //RIDiS에 task order 전달 
                        onTaskOrder(taskid, missionbuf, taskname, missionlist, robotlist, ntaskcnt1);
                        Thread.Sleep(1000);

                        Data.Instance.bTaskRun = true;
                        crashrobot_run_list.Clear();
                        crashrobot_pause_list.Clear();

                        DateTime dt = DateTime.Now;
                        Data.Instance.strTaskRun_StartTime = string.Format("{0:d4}{1:d2}{2:d2}{3:d2}{4:d2}", dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute);

                        dbBridge.onDBRead_Missionlist();
                        {
                            //db task  table 정보 갱신
                            dbBridge.onDBUpdate_Tasklist_status(taskid, "run");
                            onInitSet();

                            //db task operation table 정보 갱신 => Task 쓰레드에서 실시간 갱신 
                            for (int i2 = 0; i2 < robotbuf.Length; i2++)
                            {
                                dbBridge.onDBSave_TaskOperation(taskid, robotbuf[i2], missionlist, "", 0, "insert");
                            }

                            // onTaskPauseAll(); //ros에서 처리 

                            if (crashchk_thread != null)
                            {
                                Data.Instance.bCrashcheckStop = true;
                                crashchk_thread.Abort();
                                crashchk_thread = null;
                            }

                           

                            for (int nrobotidx = 0; nrobotidx < currTaskRobotid.Length; nrobotidx++)
                            {
                                CrashCheckRobot_list.Add(currTaskRobotid[nrobotidx]);
                            }

                            ////미션1에 가장 가까운 로봇부터 resume 시킨다. 
                            //    strStartMissionid = missionbuf[0];
                            //    string strresumrobot = onStartPos_DistMin_RobotCheck(missionbuf[0]);
                            //    StartRobot_Skip.Add(strresumrobot);
                            //    onTaskResum(strresumrobot);
                            //    strCurrStartRobot = strresumrobot;

                            //    Console.WriteLine("startrobot={0}", strCurrStartRobot);

                            //     CrashCheckRobot_list.Add(strresumrobot);



                            //task 쓰레드가 존재하는지 파악후 구동
                            int threadcnt = Data.Instance.TaskCheck_threadList.Count;
                            if (threadcnt > 0)
                            {
                                int thridx = 0;
                                for (int i = 0; i < threadcnt; i++)
                                {
                                    TaskCheck_class taskclass = Data.Instance.TaskCheck_threadList.ElementAt(i);
                                    if (taskclass.strTaskid == taskid)
                                    {
                                        if (taskclass.taskthred != null)
                                        {
                                            taskclass.taskthred.Abort();
                                            taskclass.taskthred = null;
                                        }

                                        Data.Instance.TaskCheck_threadList.RemoveAt(i);
                                    }
                                }

                            }

                            {
                                TaskCheck_class taskclass = new TaskCheck_class();
                                taskclass.strTaskid = taskid;
                                taskclass.taskfinish_Evt += new TaskCheck_class.TaskFinished(TaskFinished);

                                taskclass.taskthred = new Thread(taskclass.taskCheck_thread_func);
                                Task_checkThread_TableInfo task_checkinfo = new Task_checkThread_TableInfo();
                                task_checkinfo.taskcheck_info = new List<Task_checkThread_Info>();

                                for (int i2 = 0; i2 < robotbuf.Length; i2++)
                                {
                                    Task_checkThread_Info task_info = new Task_checkThread_Info();
                                    task_info.strrobotid = robotbuf[i2];

                                    task_checkinfo.taskcheck_info.Add(task_info);
                                }

                                Data.Instance.TaskCheck_threadList.Add(taskclass);
                                taskclass.taskthred.IsBackground = true;
                                taskclass.taskthred.Start(task_checkinfo);
                            }

                        }

                        //  timer_StartTrack.Interval = 100;
                        //  timer_StartTrack.Enabled = true;

                    }

                }
                if(toggleSwitch3.IsOn)
                {
                    commBridge.onMissionChange_publish("R_005", right_circle);
                    Thread.Sleep(10);
                    onTaskResum("R_005");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("btnDemoRun_Click err=" + ex.Message.ToString());
            }
        }
        public void onInitSet()
        {
            sqlDataSource1.Fill();
            gridView1.OptionsBehavior.Editable = false;
        }

        private void gridView1_RowCellClick_1(object sender, DevExpress.XtraGrid.Views.Grid.RowCellClickEventArgs e)
        {
            taskname = gridView1.GetFocusedRowCellValue("task_name").ToString();
            taskid = gridView1.GetFocusedRowCellValue("task_id").ToString();
            missionlist = gridView1.GetFocusedRowCellValue("mission_list").ToString();
            robotlist = gridView1.GetFocusedRowCellValue("robot_list").ToString();
            actionIDX = gridView1.GetDataSourceRowIndex(e.RowHandle);
            //test.Text = taskname;
        }

        private void simpleButton3_Click(object sender, EventArgs e)
        {
            try
            {
                convCheck.Enabled = false;
                //ros 연결후 
                if (Data.Instance.isConnected)
                {
                    string taskid = gridView1.GetFocusedRowCellValue("task_id").ToString();
                    string missionlist = gridView1.GetFocusedRowCellValue("mission_list").ToString();
                    string robotlist = gridView1.GetFocusedRowCellValue("robot_list").ToString();

                    string[] missionbuf = missionlist.Split(',');
                    string[] robotbuf = robotlist.Split(',');

                    onTaskCancel(robotbuf);
                    {
                        //db 정보 갱신
                        dbBridge.onDBUpdate_Tasklist_status(taskid, "wait");

                        //task operation db 삭제 
                        for (int i2 = 0; i2 < robotbuf.Length; i2++)
                        {
                            dbBridge.onDBDelete_TaskOperation(taskid, robotbuf[i2]);
                        }

                        //쓰레드 삭제
                        int threadcnt = Data.Instance.TaskCheck_threadList.Count;
                        if (threadcnt > 0)
                        {
                            int thridx = 0;
                            TaskCheck_class taskclass = Data.Instance.TaskCheck_threadList.ElementAt(thridx);

                            if (taskclass.strTaskid == taskid)
                            {
                                if (taskclass.taskthred != null)
                                {
                                    taskclass.taskthred.Abort();
                                    taskclass = null;
                                }

                                Data.Instance.TaskCheck_threadList.RemoveAt(thridx);
                            }
                        }

                        onInitSet();
                    }


                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("btnTaskStop_Click err=" + ex.Message.ToString());
            }
        }
        private async void onTaskCancel(string[] robotbuf)
        {
            try
            {
                int nrobottotalcnt = robotbuf.Length;

                for (int nrobotcnt = 0; nrobotcnt < nrobottotalcnt; nrobotcnt++)
                {

                    string strRobot = robotbuf[nrobotcnt];
                    var task = Task.Run(() => commBridge.onTaskCancel_publish(strRobot, ""));
                    await task;

                    Thread.Sleep(100);

                    Console.WriteLine("cancel = {0}" + strRobot);

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("onTaskCancel err=" + ex.Message.ToString());
            }
        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            onTaskPause("R_001");
        }

        private void simpleButton8_Click(object sender, EventArgs e)
        {
            onTaskPause("R_004");
        }

        private void simpleButton10_Click(object sender, EventArgs e)
        {
            onTaskPause("R_005");
        }

        private void simpleButton7_Click(object sender, EventArgs e)
        {
            onTaskResum("R_001");
        }

        private void simpleButton9_Click(object sender, EventArgs e)
        {
            onTaskResum("R_004");
        }

        private void simpleButton11_Click(object sender, EventArgs e)
        {
            onTaskResum("R_005");
        }

        private void simpleButton15_Click(object sender, EventArgs e)
        {
            GREEN = false;
            RED = false;
            commBridge.onMissionChange_publish("R_004", basic_mission);
            commBridge.onMissionChange_publish("R_005", basic_mission);
            strCurr5_MissionID = basic_mission;
            strCurr4_MissionID = basic_mission;

            onTaskResum("R_004");
            onTaskResum("R_005");
            robot5idx = 2; // 1
            robot4idx = 2;
        }
        bool bRedclick = false;
        private void simpleButton16_Click(object sender, EventArgs e)
        {

        }

        private void progressPanel1_Click(object sender, EventArgs e)
        {

        }

        private void btnUp_Click(object sender, EventArgs e)
        {
            translate_y -= 50;
            onMapDisplay1();
        }

        private void btnDn_Click(object sender, EventArgs e)
        {
            translate_y += 50;
            onMapDisplay1();
        }

        private void btnLeft_Click(object sender, EventArgs e)
        {
            translate_x -= 50;
            onMapDisplay1();
        }

        private void btnRight_Click(object sender, EventArgs e)
        {
            translate_x += 50;
            onMapDisplay1();
        }
        private void ledREDON()
        {
            byte[] senddata = new byte[100];
            int send_length = 0;

            senddata[send_length] = 0xAA; send_length++; //STX            
            senddata[send_length] = 0xF1; send_length++; //CMD1
            senddata[send_length] = 0x10; send_length++; //CMD2
            senddata[send_length] = 0x01; send_length++; //CMD3
            senddata[send_length] = 0x00; send_length++; //DATA1
            senddata[send_length] = 0x00; send_length++; //DATA2
            senddata[send_length] = 0x00; send_length++; //DATA3
            senddata[send_length] = 0x02; send_length++; //DATA4
            senddata[send_length] = 0x00; send_length++; //CRC
            senddata[send_length] = 0x55; send_length++; //ETX
            senddata[8] = ChkSum(senddata);
            if (xisIPaddress[0] != null)
            {
                SubconSocket_Info[xisIPaddress[0]].BeginByteSend(senddata, send_length);
            }
            if (xisIPaddress[1] != null)
            {
                SubconSocket_Info[xisIPaddress[1]].BeginByteSend(senddata, send_length);
            }
            //textbox1.appendText("RED LED ON \r\n");
        }
        private void ledGREENON()
        {
            byte[] senddata = new byte[100];
            int send_length = 0;

            senddata[send_length] = 0xAA; send_length++; //STX            
            senddata[send_length] = 0xF1; send_length++; //CMD1
            senddata[send_length] = 0x10; send_length++; //CMD2
            senddata[send_length] = 0x01; send_length++; //CMD3
            senddata[send_length] = 0x00; send_length++; //DATA1
            senddata[send_length] = 0x00; send_length++; //DATA2
            senddata[send_length] = 0x00; send_length++; //DATA3
            senddata[send_length] = 0x03; send_length++; //DATA4
            senddata[send_length] = 0x00; send_length++; //CRC
            senddata[send_length] = 0x55; send_length++; //ETX
            senddata[8] = ChkSum(senddata);
            if (xisIPaddress[0] != null)
            {
                SubconSocket_Info[xisIPaddress[0]].BeginByteSend(senddata, send_length);
            }
            if (xisIPaddress[1] != null)
            {
                SubconSocket_Info[xisIPaddress[1]].BeginByteSend(senddata, send_length);
            }
            //textbox1.appendText("GREEN LED ON \r\n");
        }
        private void button1_Click(object sender, EventArgs e)
        {
            ledREDON();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            ledGREENON();
        }


        System.Net.NetworkInformation.PingOptions options = new PingOptions();
        bool bformclose = false;

        string[] ipAddress = { "192.168.0.49", "192.168.0.50", "192.168.0.51", "192.168.0.52", "192.168.0.53", "192.168.0.54" };
        Ping pingSender = new Ping();

        public void pingTest()
        {
            options.DontFragment = true;
            string data = "this is test message";
            byte[] buffer = Encoding.ASCII.GetBytes(data);
            int timeout = 120;
            while (true)
            {
                if (bformclose) break;

                for (int i = 0; i < ipAddress.Length; i++)
                {
                    try
                    {
                        PingReply reply = pingSender.Send(ipAddress[i], timeout, buffer, options);
                        if (reply.Status == IPStatus.Success)
                        {
                            Data.Instance.robotStatus[i] = true;
                        }
                        else
                        {
                            Data.Instance.robotStatus[i] = false;
                        }
                    }
                    catch
                    {

                    }

                    Thread.Sleep(1000);
                }
            }
        }

        

        private void button3_Click(object sender, EventArgs e)
        {
            byte[] senddata = new byte[100];
            int send_length = 0;
            senddata[send_length] = 0xAA; send_length++; //STX            
            senddata[send_length] = 0xF1; send_length++; //CMD1
            senddata[send_length] = 0x10; send_length++; //CMD2
            senddata[send_length] = 0x01; send_length++; //CMD3
            senddata[send_length] = 0x00; send_length++; //DATA1
            senddata[send_length] = 0x00; send_length++; //DATA2
            senddata[send_length] = 0x00; send_length++; //DATA3
            senddata[send_length] = 0x01; send_length++; //DATA4
            senddata[send_length] = 0x00; send_length++; //CRC
            senddata[send_length] = 0x55; send_length++; //ETX
            senddata[8] = ChkSum(senddata);
            if (xisIPaddress[0] != null)
            {
                SubconSocket_Info[xisIPaddress[0]].BeginByteSend(senddata, send_length);
            }
            if (xisIPaddress[1] != null)
            {
                SubconSocket_Info[xisIPaddress[1]].BeginByteSend(senddata, send_length);
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            convInput();
            //byte[] senddata = new byte[100];
            //int send_length = 0;

            //senddata[send_length] = 0xAA; send_length++; //STX

            //senddata[send_length] = 0x10; send_length++; //CMD1
            //senddata[send_length] = 0x0A; send_length++; //CMD2
            //senddata[send_length] = 0x05; send_length++; //CMD3
            //senddata[send_length] = 0x01; send_length++; //DATA1
            //senddata[send_length] = 0x00; send_length++; //DATA2
            //senddata[send_length] = 0x00; send_length++; //DATA3
            //senddata[send_length] = 0x00; send_length++; //DATA4
            //senddata[send_length] = 0x00; send_length++; //CRC
            //senddata[send_length] = 0x55; send_length++; //ETX
            //senddata[8] = ChkSum(senddata);
            //if (xisIPaddress[2] != null)
            //{
            //    SubconSocket_Info[xisIPaddress[2]].BeginByteSend(senddata, send_length);
            //}
        }

        private void convOutput()
        {
            byte[] senddata = new byte[100];
            int send_length = 0;

            senddata[send_length] = 0xAA; send_length++; //STX

            senddata[send_length] = 0x10; send_length++; //CMD1
            senddata[send_length] = 0x0A; send_length++; //CMD2
            senddata[send_length] = 0x05; send_length++; //CMD3
            senddata[send_length] = 0x02; send_length++; //DATA1
            senddata[send_length] = 0x00; send_length++; //DATA2
            senddata[send_length] = 0x00; send_length++; //DATA3
            senddata[send_length] = 0x00; send_length++; //DATA4
            senddata[send_length] = 0x00; send_length++; //CRC
            senddata[send_length] = 0x55; send_length++; //ETX
            senddata[8] = ChkSum(senddata);
            if (xisIPaddress[2] != null)
            {
                SubconSocket_Info[xisIPaddress[2]].BeginByteSend(senddata, send_length);
            }
        }
        private void convPause()
        {
            byte[] senddata = new byte[100];
            int send_length = 0;

            senddata[send_length] = 0xAA; send_length++; //STX

            senddata[send_length] = 0x10; send_length++; //CMD1
            senddata[send_length] = 0x0A; send_length++; //CMD2
            senddata[send_length] = 0x05; send_length++; //CMD3
            senddata[send_length] = 0x03; send_length++; //DATA1
            senddata[send_length] = 0x00; send_length++; //DATA2
            senddata[send_length] = 0x00; send_length++; //DATA3
            senddata[send_length] = 0x00; send_length++; //DATA4
            senddata[send_length] = 0x00; send_length++; //CRC
            senddata[send_length] = 0x55; send_length++; //ETX
            senddata[8] = ChkSum(senddata);
            if (xisIPaddress[2] != null)
            {
                SubconSocket_Info[xisIPaddress[2]].BeginByteSend(senddata, send_length);
            }
            convFinish = true;
        }
        private void button5_Click(object sender, EventArgs e)
        {
            convOutput();
        }
        private void convInput()
        {
            byte[] senddata = new byte[100];
            int send_length = 0;

            senddata[send_length] = 0xAA; send_length++; //STX

            senddata[send_length] = 0x10; send_length++; //CMD1
            senddata[send_length] = 0x0A; send_length++; //CMD2
            senddata[send_length] = 0x05; send_length++; //CMD3
            senddata[send_length] = 0x01; send_length++; //DATA1
            senddata[send_length] = 0x00; send_length++; //DATA2
            senddata[send_length] = 0x00; send_length++; //DATA3
            senddata[send_length] = 0x00; send_length++; //DATA4
            senddata[send_length] = 0x00; send_length++; //CRC
            senddata[send_length] = 0x55; send_length++; //ETX
            senddata[8] = ChkSum(senddata);
            if (xisIPaddress[2] != null)
            {
                SubconSocket_Info[xisIPaddress[2]].BeginByteSend(senddata, send_length);
            }
        }
        private void programCheck()
        {
            for (int i = 0; i < 3; i++)
            {
                ledREDON();
                Thread.Sleep(100);
                ledGREENON();
                Thread.Sleep(100);
            }
            ledGREENON();
        }
        private void pb_map_Paint(object sender, PaintEventArgs e)
        {

            try
            {
                Pen pen = new Pen(Brushes.Red, 1);
                if (bMaploading)
                {
                    e.Graphics.DrawLine(pen, (float)dOrignX - 10, (float)dOrignY, (float)dOrignX + 10, (float)dOrignY);
                    e.Graphics.DrawLine(pen, (float)dOrignX, (float)dOrignY - 10, (float)dOrignX, (float)dOrignY + 10);
                    e.Graphics.DrawEllipse(Pens.Red, dOrignX - 10, dOrignY - 10, 10, 10);

                    foreach (KeyValuePair<string, Robot_RegInfo> info in Data.Instance.Robot_RegInfo_list)
                    {
                        string strrobotid = info.Key;


                        if (Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate != null)
                        {
                            if (Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg != null)
                            {
                                float robotx = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg.pose.x;
                                float roboty = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg.pose.y;
                                float robottheta = (float)Data.Instance.Robot_work_info[strrobotid].robot_status_info.robotstate.msg.pose.theta;

                                float cellX = robotx / resoultion1;
                                float cellY = roboty / resoultion1;

                                PointF pos = new PointF();
                                pos.X = dOrignX + cellX * ratio;
                                pos.Y = dOrignY - cellY * ratio;
                                Pen pen_robot = new Pen(Brushes.BlueViolet, 3);
                                pen_robot.DashStyle = DashStyle.Solid;
                                e.Graphics.DrawEllipse(pen_robot, pos.X - 10, pos.Y - 10, 20, 20);
                                e.Graphics.DrawString(string.Format("{0}", strrobotid), new Font("고딕체", 5), Brushes.Black, pos.X - 10, pos.Y - 20);


                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.Out.WriteLine("pb_map_Paint err :={0}", ex.Message.ToString());
            }
        }

        private void convCheck_Tick(object sender, EventArgs e)
        {
            convCheck.Enabled = false;

            //Console.WriteLine(" dockingFinish 값 : {0},  convFinish 값 : {1} ", dockingFinish, convFinish);
            //Console.WriteLine("Bool robot4 value : {0}", bRobot4_run);
            //Console.WriteLine("4번 wait : {0}, 5번 wait : {1}", bRobot4_wait, bRobot5_wait);

            
            if (dockingFinish && convFinish) // dockingfinish -> variable 
            {
                if (toggleSwitch2.IsOn)
                {
                    //onTaskPause("R_005");

                    //commBridge.onMissionChange_publish("R_004", green_button);
                    //strCurr4_MissionID = green_button;
                    //Thread.Sleep(100);
                    //onTaskResum("R_004");


                    //commBridge.onMissionChange_publish("R_001", robot1_rear);
                    //Thread.Sleep(50);
                    //onTaskResum("R_001");


                    convFinish = false;
                    Console.WriteLine("도킹 & 컨베이어 TRUE");
                    //textbox1.appendText("도킹, 컨베이어 작업 완료 \r\n");
                }
            }
            else if (bRobot4_wait && bRobot5_wait)
            {
                onRestart();
            }

            convCheck.Enabled = true;
            //pb_map.Dispose();
        }

        private void onRestart()
        {
            ledGREENON();
            bRobot4_run = false;
            bRobot4_wait = false;
            bRobot5_wait = false;

            bconv_run = false;

            commBridge.onMissionChange_publish("R_004", basic_mission);
            commBridge.onMissionChange_publish("R_005", basic_mission);
            strCurr4_MissionID = basic_mission;
            strCurr5_MissionID = basic_mission;

            onTaskResum("R_005");
            //textbox1.appendText("TASK 재시작 : Robot5 , Robot4\r\n");


        }
        private void simpleButton1_Click_1(object sender, EventArgs e)
        {
            if (Data.Instance.isConnected)
            {
                m_strRobotName = "R_005";
                onSelectRobotMap_monitor(m_strRobotName);
            }
        }

        private void button6_Click(object sender, EventArgs e)
        {
            
        }

        private void button8_Click(object sender, EventArgs e)
        {
            commBridge.onMissionChange_publish("R_001", robot1_front);
            //textbox1.appendText("로봇1 전진 Basic move \r\n");

            onTaskResum("R_001");
        }

        private void button9_Click(object sender, EventArgs e)
        {
            commBridge.onMissionChange_publish("R_001", robot1_rear);
            //textbox1.appendText("로봇1 후진 Basic move \r\n");
            onTaskResum("R_001");
        }

        private void button10_Click(object sender, EventArgs e)
        {
            commBridge.onMissionChange_publish("R_005", docking_input);
            //textbox1.appendText("컨베이어 1 -> 5 동작 미션 체인지 \r\n");
            onTaskResum("R_005");
        }

        private void button11_Click(object sender, EventArgs e)
        {
            commBridge.onMissionChange_publish("R_005", docking_output);
            //textbox1.appendText("컨베이어 5 -> 1 동작 미션 체인지 \r\n");
            onTaskResum("R_005");
        }

        private void simpleButton13_Click(object sender, EventArgs e)
        {
            onTaskPause("R_001");
            onTaskPause("R_004");
            onTaskPause("R_005");
        }

        private void simpleButton15_Click_1(object sender, EventArgs e)
        {
            textBox2.AppendText("RiDIS에 접속중입니다...\r\n");
            ROSConnection(strAddr);
            textBox2.AppendText("RiDIS에 접속이 완료 되었습니다.\r\n");
        }

        private void simpleButton16_Click_1(object sender, EventArgs e)
        {
            textBox2.AppendText("RiDIS와 접속을 해제중입니다...\r\n");
            ROSDisconnect();
            textBox2.AppendText("RiDIS와의 접속을 해제 하였습니다...\r\n");
        }

        private void zoomTrackBarControl1_EditValueChanged(object sender, EventArgs e)
        {
            int tmpratio = zoomTrackBarControl1.Value;

            ratio = (float)(tmpratio) / 10;


            onMapDisplay1();
        }
        private void simpleButton11_Click_1(object sender, EventArgs e)
        {
            onTaskResum("R_002");
        }

        private void simpleButton9_Click_1(object sender, EventArgs e)
        {
            onTaskResum("R_004");
        }

        private void simpleButton8_Click_1(object sender, EventArgs e)
        {
            onTaskPause("R_004");
        }

        private void simpleButton10_Click_1(object sender, EventArgs e)
        {
            onTaskPause("R_002");
        }

        private void label12_Click(object sender, EventArgs e)
        {

        }

        private void button6_Click_1(object sender, EventArgs e)
        {
            convPause();
            

        }

        private void simpleButton7_Click_1(object sender, EventArgs e)
        {
            onTaskResum("R_001");
        }

        private void simpleButton5_Click_1(object sender, EventArgs e)
        {
            onTaskPause("R_001");
        }

        private void onDemoRun2()
        {
            try
            {
                Data.Instance.bCrashcheckPause = false;
                bLinedrive1_waitok = false;
                bLinedrive2_waitok = false;

                nlinedriveCnt = 0;

                nbasicmoveCnt = 0;
                nliftCnt = 0;

                bTmpMove = false;
                bTmpMove_pause_robotid = "";
                bTmpMove_run_robotid = "";


                strCurrStartRobot = "";
                if (Data.Instance.isConnected)
                {

                    int nrow = actionIDX;

                    if (nrow < 0 || nrow > gridView1.RowCount - 2) return;

                    string taskid_ = taskid;
                    string taskname_ = taskname;
                    string missionlist_ = missionlist;
                    string robotlist_ = robotlist;

                    string[] missionbuf = missionlist.Split(',');
                    string[] robotbuf = robotlist.Split(',');

                    int ntaskcnt = 0;

                    string strMsg = "";


                    currTaskRobotid = new string[robotbuf.Length];
                    ncurrTaskRobotid_idx = 0;
                    strStartMissionid = "";
                    StartRobot_Skip.Clear();
                    CrashCheckRobot_list.Clear();
                    CrashCheckRobot_Linedrive_list.Clear();
                  //  Data.Instance.bMissionCompleteCheck = false;


                    for (int i = 0; i < robotbuf.Length; i++)
                    {
                        string strrobotcnt = string.Format("{0}", ntaskcnt);

                        strMsg += string.Format("{0},반복({1}) ", robotbuf[i], strrobotcnt);

                        currTaskRobotid[i] = robotbuf[i];
                    }

                    strMsg += " 동작 하시겠습니까?";

                    if (DialogResult.OK == MessageBox.Show(strMsg, "확인", MessageBoxButtons.OKCancel))
                    {
                        //int ntaskcnt1 = int.Parse(txtTaskCnt.Text.ToString());
                        int ntaskcnt1 = 0;

                        for (int i = 0; i < robotbuf.Length; i++)
                        {
                            if (Data.Instance.Robot_work_info[robotbuf[i]].robot_status_info.taskfeedback != null)
                            {
                                if (Data.Instance.Robot_work_info[robotbuf[i]].robot_status_info.taskfeedback.msg != null)
                                {
                                    Data.Instance.Robot_work_info[robotbuf[i]].robot_status_info.taskfeedback.msg.feedback.action_indx = 0;
                                    Data.Instance.Robot_work_info[robotbuf[i]].robot_status_info.taskfeedback.msg.feedback.mission_indx = 0;
                                }
                            }
                        }

                        listBox1.Items.Clear();

                        //RIDiS에 task order 전달 
                        onTaskOrder(taskid, missionbuf, taskname, missionlist, robotlist, ntaskcnt1);
                        Thread.Sleep(1000);

                        Data.Instance.bTaskRun = true;
                        crashrobot_run_list.Clear();
                        crashrobot_pause_list.Clear();

                        DateTime dt = DateTime.Now;
                        Data.Instance.strTaskRun_StartTime = string.Format("{0:d4}{1:d2}{2:d2}{3:d2}{4:d2}", dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute);

                        dbBridge.onDBRead_Missionlist();
                        {
                            //db task  table 정보 갱신
                            dbBridge.onDBUpdate_Tasklist_status(taskid, "run");
                            onInitSet();

                            //db task operation table 정보 갱신 => Task 쓰레드에서 실시간 갱신 
                            for (int i2 = 0; i2 < robotbuf.Length; i2++)
                            {
                                dbBridge.onDBSave_TaskOperation(taskid, robotbuf[i2], missionlist, "", 0, "insert");
                            }

                            // onTaskPauseAll(); //ros에서 처리 

                            if (crashchk_thread != null)
                            {
                                Data.Instance.bCrashcheckStop = true;
                                crashchk_thread.Abort();
                                crashchk_thread = null;
                            }

                            Data.Instance.bMissionCompleteCheck = true;


                            onCrash_Start();


                            for (int nrobotidx = 0; nrobotidx < currTaskRobotid.Length; nrobotidx++)
                            {
                                CrashCheckRobot_list.Add(currTaskRobotid[nrobotidx]);
                            }

                            ////미션1에 가장 가까운 로봇부터 resume 시킨다. 
                            //    strStartMissionid = missionbuf[0];
                            //    string strresumrobot = onStartPos_DistMin_RobotCheck(missionbuf[0]);
                            //    StartRobot_Skip.Add(strresumrobot);
                            //    onTaskResume(strresumrobot);
                            //    strCurrStartRobot = strresumrobot;

                            //    Console.WriteLine("startrobot={0}", strCurrStartRobot);

                            //     CrashCheckRobot_list.Add(strresumrobot);



                            //task 쓰레드가 존재하는지 파악후 구동
                            int threadcnt = Data.Instance.TaskCheck_threadList.Count;
                            if (threadcnt > 0)
                            {
                                int thridx = 0;
                                for (int i = 0; i < threadcnt; i++)
                                {
                                    TaskCheck_class taskclass = Data.Instance.TaskCheck_threadList.ElementAt(i);
                                    if (taskclass.strTaskid == taskid)
                                    {
                                        if (taskclass.taskthred != null)
                                        {
                                            taskclass.taskthred.Abort();
                                            taskclass.taskthred = null;
                                        }

                                        Data.Instance.TaskCheck_threadList.RemoveAt(i);
                                    }
                                }

                            }

                            {
                                TaskCheck_class taskclass = new TaskCheck_class();
                                taskclass.strTaskid = taskid;
                                taskclass.taskfinish_Evt += new TaskCheck_class.TaskFinished(TaskFinished);

                                taskclass.taskthred = new Thread(taskclass.taskCheck_thread_func);
                                Task_checkThread_TableInfo task_checkinfo = new Task_checkThread_TableInfo();
                                task_checkinfo.taskcheck_info = new List<Task_checkThread_Info>();

                                for (int i2 = 0; i2 < robotbuf.Length; i2++)
                                {
                                    Task_checkThread_Info task_info = new Task_checkThread_Info();
                                    task_info.strrobotid = robotbuf[i2];

                                    task_checkinfo.taskcheck_info.Add(task_info);
                                }

                                Data.Instance.TaskCheck_threadList.Add(taskclass);
                                taskclass.taskthred.Start(task_checkinfo);
                            }

                        }

                        //  timer_StartTrack.Interval = 100;
                        //  timer_StartTrack.Enabled = true;

                    }

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("btnDemoRun_Click err=" + ex.Message.ToString());
            }
        }
        private async void onTaskOrder(string strTaskid, string[] missionbuf, string taskname, string strMissionid_list, string strRobotlist, int ntaskcnt)
        {
            try
            {
                Task_Order taskorder = new Task_Order();
                int cnt = missionbuf.Length;
                List<MisssionInfo> missioninfo_list = new List<MisssionInfo>();
                for (int i = 0; i < cnt; i++)
                {
                    MisssionInfo missioninfo = dbBridge.onDBRead_Mission(missionbuf[i]);

                    missioninfo_list.Add(missioninfo);
                }

                taskorder.task_id = strTaskid;
                taskorder.loop_flag = ntaskcnt;
                taskorder.missionlist = strMissionid_list;
                taskorder.robotlist = strRobotlist;

                commBridge.onTaskrder_publish(taskorder, taskname, missioninfo_list);

                // var task = Task.Run(() => mainform.commBridge.onTaskrder_publish(taskorder, taskname, missioninfo_list));
                // await task;
            }
            catch (Exception ex)
            {
                Console.WriteLine("onTaskOrder err=" + ex.Message.ToString());
            }
        }
        public void TaskFinished(string strtaskid)
        {
            try
            {
                lock (this)
                {
                    //db 정보 갱신
                    dbBridge.onDBUpdate_Tasklist_status(strtaskid, "wait");

                    //task operation db 삭제 
                    dbBridge.onDBDelete_TaskOperation(strtaskid, "");

                    Data.Instance.bMissionCompleteCheck = false;

                    //쓰레드 삭제
                    int threadcnt = Data.Instance.TaskCheck_threadList.Count;
                    if (threadcnt > 0)
                    {
                        int thridx = 0;
                        Syscon_Solution.TaskCheck_class taskclass = Data.Instance.TaskCheck_threadList.ElementAt(thridx);

                        if (taskclass.strTaskid == strtaskid)
                        {
                            if (taskclass.taskthred != null)
                            {
                                taskclass.taskthred.Abort();
                                taskclass = null;
                            }

                            Data.Instance.TaskCheck_threadList.RemoveAt(thridx);
                        }
                    }

                    //if (Data.Instance.nFormidx == (int)Data.FORM_IDX.Operaion_TaskForm)
                    //{
                    //    taskopCtrl.onInitSet();
                    //}
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine("TaskFinished err=" + ex.Message.ToString());
            }
        }
    }
}
